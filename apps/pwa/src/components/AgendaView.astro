---
import type { EventFromDB } from '../types/database';
import { getFormattedTime } from '../utils/date';

interface Props {
    events: EventFromDB[];
    title?: string;
    showMonthYear?: boolean;
}

const { events, title = 'Agenda', showMonthYear = true } = Astro.props;

// Group events by date
const eventsByDate = events.reduce(
    (acc, event) => {
        const eventDate = new Date(event.start_time);
        const dateKey = eventDate.toISOString().split('T')[0]; // YYYY-MM-DD format

        if (!acc[dateKey]) {
            acc[dateKey] = [];
        }

        acc[dateKey].push(event);
        return acc;
    },
    {} as Record<string, EventFromDB[]>
);

// Sort dates
const sortedDates = Object.keys(eventsByDate).sort();

// Function to format date for display
function formatDateHeader(dateStr: string) {
    const date = new Date(dateStr);
    const day = date.getDate();
    const weekday = date.toLocaleDateString('en-US', { weekday: 'short' }).toUpperCase();
    const month = date.toLocaleDateString('en-US', { month: 'short' }).toUpperCase();
    const monthName = date.toLocaleDateString('en-US', { month: 'short' });

    return { day, weekday, month, monthName };
}

// Function to get color based on event type or random
function getEventColor(event: EventFromDB) {
    // Default colors based on event type
    const typeColors = {
        default: 'bg-purple-500',
        workshop: 'bg-blue-500',
        conference: 'bg-emerald-500',
        meetup: 'bg-amber-500',
    };

    // Use event type color if available, otherwise use a default color
    return event.type && typeColors[event.type] ? typeColors[event.type] : 'bg-gray-500';
}

// Function to format time range
function formatTimeRange(event: EventFromDB) {
    const startTime = getFormattedTime(event.start_time);

    if (!event.end_time) {
        return startTime;
    }

    const endTime = getFormattedTime(event.end_time);
    return `${startTime} - ${endTime}`;
}

// Function to get a placeholder gradient background based on event type
function getEventGradient(event: EventFromDB) {
    // Default gradients based on event type
    const typeGradients = {
        default: 'bg-gradient-to-br from-purple-500 to-purple-700',
        workshop: 'bg-gradient-to-br from-blue-500 to-blue-700',
        conference: 'bg-gradient-to-br from-emerald-500 to-emerald-700',
        meetup: 'bg-gradient-to-br from-amber-500 to-amber-700',
    };

    // Use event type gradient if available, otherwise use a default gradient
    return event.type && typeGradients[event.type]
        ? typeGradients[event.type]
        : 'bg-gradient-to-br from-gray-500 to-gray-700';
}
---

<div class="agenda-view">
    {title && <h2 class="text-xl font-semibold text-gray-900 mb-6">{title}</h2>}

    <div class="space-y-6">
        {
            sortedDates.map((dateStr, dateIndex) => {
                const { day, weekday, month, monthName } = formatDateHeader(dateStr);
                const dateEvents = eventsByDate[dateStr];
                const date = new Date(dateStr);

                return (
                    <div class="agenda-day">
                        <div class="flex flex-row items-stretch">
                            {/* Date card - styled similar to the screenshot */}
                            <div class="flex flex-col items-center justify-center w-16 sm:w-24 bg-gray-50 text-center p-2 rounded-l-lg border-r border-gray-200">
                                <div class="text-2xl sm:text-3xl font-bold text-gray-900">{day}</div>
                                <div class="text-xs uppercase tracking-wide font-medium text-gray-600">{weekday}</div>
                                <div class="text-xs text-gray-500 uppercase tracking-wide mt-1">{month}</div>
                            </div>

                            {/* Events column */}
                            <div class="flex-1 bg-white rounded-r-lg shadow-sm overflow-hidden">
                                {dateEvents.map((event, eventIndex) => (
                                    <a
                                        href={`/events/${event.slug || event.id}`}
                                        class="block group hover:bg-gray-50 transition-colors"
                                    >
                                        <div class={`p-4 ${eventIndex > 0 ? 'border-t border-gray-100' : ''}`}>
                                            <div class="flex flex-col sm:flex-row gap-4">
                                                {/* Cover Photo or Placeholder */}
                                                <div class="w-full sm:w-32 h-32 sm:h-24 rounded-lg overflow-hidden flex-shrink-0 relative">
                                                    {event.cover_photo ? (
                                                        <img
                                                            src={event.cover_photo}
                                                            alt={`${event.name} cover`}
                                                            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                                                            loading="lazy"
                                                        />
                                                    ) : (
                                                        <div
                                                            class={`w-full h-full flex items-center justify-center ${getEventGradient(event)}`}
                                                        >
                                                            <div class="text-white text-center p-2">
                                                                <div class="text-xs font-semibold uppercase tracking-wider">
                                                                    {event.type || 'Event'}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    )}

                                                    {/* Badge overlay for visual category indication */}
                                                    {event.type && (
                                                        <div class="absolute top-2 right-2 z-10">
                                                            <span
                                                                class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium shadow-sm ${
                                                                    event.type === 'workshop'
                                                                        ? 'bg-blue-500 text-white'
                                                                        : event.type === 'conference'
                                                                          ? 'bg-emerald-500 text-white'
                                                                          : event.type === 'meetup'
                                                                            ? 'bg-amber-500 text-white'
                                                                            : 'bg-purple-500 text-white'
                                                                }`}
                                                            >
                                                                {event.type.charAt(0).toUpperCase() +
                                                                    event.type.slice(1)}
                                                            </span>
                                                        </div>
                                                    )}
                                                </div>

                                                <div class="flex-1 min-w-0">
                                                    {/* Event title and verified badge */}
                                                    <div class="flex items-center flex-wrap gap-1">
                                                        <h3 class="text-base font-semibold text-gray-900 group-hover:text-purple-600 transition-colors line-clamp-1 flex items-center gap-1">
                                                            <span>{event.name}</span>
                                                            {event?.account_id && (
                                                                <svg
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                    width="16"
                                                                    height="16"
                                                                    viewBox="0 0 24 24"
                                                                    fill="none"
                                                                    stroke="#22c55e"
                                                                    stroke-width="2"
                                                                    stroke-linecap="round"
                                                                    stroke-linejoin="round"
                                                                    class="lucide lucide-badge-check flex-shrink-0 text-green-500 ml-1"
                                                                >
                                                                    <path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" />
                                                                    <path d="m9 12 2 2 4-4" />
                                                                </svg>
                                                            )}
                                                        </h3>
                                                    </div>

                                                    {/* Event description - show a short excerpt */}
                                                    {event.description && (
                                                        <p class="mt-1 text-sm text-gray-600 line-clamp-2">
                                                            {event.description.substring(0, 120)}
                                                            {event.description.length > 120 ? '...' : ''}
                                                        </p>
                                                    )}

                                                    <div class="mt-2 flex flex-wrap items-center gap-x-4 gap-y-2">
                                                        {/* Time */}
                                                        <div class="flex items-center text-sm text-gray-600">
                                                            <svg
                                                                class="w-4 h-4 mr-1.5 text-gray-400 flex-shrink-0"
                                                                fill="none"
                                                                stroke="currentColor"
                                                                viewBox="0 0 24 24"
                                                            >
                                                                <path
                                                                    stroke-linecap="round"
                                                                    stroke-linejoin="round"
                                                                    stroke-width="2"
                                                                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                                                                />
                                                            </svg>
                                                            <time datetime={event.start_time} class="line-clamp-1">
                                                                {formatTimeRange(event)}
                                                            </time>
                                                        </div>

                                                        {/* Location */}
                                                        {event.location && (
                                                            <div class="flex items-center text-sm text-gray-600">
                                                                <svg
                                                                    class="w-4 h-4 mr-1.5 text-gray-400 flex-shrink-0"
                                                                    fill="none"
                                                                    stroke="currentColor"
                                                                    viewBox="0 0 24 24"
                                                                >
                                                                    <path
                                                                        stroke-linecap="round"
                                                                        stroke-linejoin="round"
                                                                        stroke-width="2"
                                                                        d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                                                                    />
                                                                    <path
                                                                        stroke-linecap="round"
                                                                        stroke-linejoin="round"
                                                                        stroke-width="2"
                                                                        d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                                                                    />
                                                                </svg>
                                                                <div class="line-clamp-1">{event.location}</div>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>
                );
            })
        }
    </div>
</div>

<style>
    .line-clamp-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
