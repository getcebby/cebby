---
const navigation = [
    { name: 'Events', href: '/events', icon: 'home' },
    { name: 'Calendar', href: '/calendar', icon: 'calendar' },
    { name: 'Saved', href: '/saved', icon: 'bookmark' },
];

const currentPath = new URL(Astro.request.url).pathname;
const pathname = currentPath.endsWith('/') ? currentPath : `${currentPath}/`;
---

<nav
    id="bottom-navigation"
    class="fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 pb-safe sm:hidden transition-transform duration-300 ease-out"
>
    <div class="px-4 px-safe">
        <div class="flex justify-around">
            {
                navigation.map((item) => {
                    const itemPath = item.href.endsWith('/') ? item.href : `${item.href}/`;
                    const isActive = pathname === itemPath;

                    return (
                        <a
                            href={item.href}
                            class:list={[
                                'flex flex-col items-center px-3 py-4 text-xs font-medium relative transition-all duration-300 ease-in-out nav-link',
                                isActive ? 'text-purple-600' : 'text-gray-600 hover:text-gray-900',
                                isActive && 'scale-110',
                            ]}
                            aria-current={isActive ? 'page' : undefined}
                        >
                            {item.icon === 'home' && (
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    class="lucide lucide-house-icon lucide-house"
                                >
                                    <path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8" />
                                    <path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
                                </svg>
                            )}
                            {item.icon === 'calendar' && (
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    class="lucide lucide-calendar-fold nav-icon transition-all duration-200"
                                >
                                    <path d="M8 2v4" class="calendar-line-1" />
                                    <path d="M16 2v4" class="calendar-line-2" />
                                    <path
                                        d="M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z"
                                        class="calendar-body"
                                    />
                                    <path d="M3 10h18" class="calendar-divider" />
                                    <path d="M15 22v-4a2 2 0 0 1 2-2h4" class="calendar-fold" />
                                </svg>
                            )}
                            {item.icon === 'search' && (
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    class={`lucide lucide-search nav-icon transition-all duration-200 ${isActive ? 'scale-110' : 'scale-100'}`}
                                >
                                    <circle cx="11" cy="11" r="8" class="search-circle" />
                                    <path d="m21 21-4.3-4.3" class="search-handle" />
                                </svg>
                            )}
                            {item.icon === 'bookmark' && (
                                <svg
                                    class={`w-6 h-6 nav-icon transition-all duration-200 ${isActive ? 'scale-110' : 'scale-100'}`}
                                    fill={isActive ? 'currentColor' : 'none'}
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width={isActive ? '1.5' : '2'}
                                        d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"
                                        class="bookmark-body"
                                    />
                                </svg>
                            )}
                            <span class="mt-1 font-medium text-[0.7rem] nav-text transition-opacity duration-200">
                                {item.name}
                            </span>
                        </a>
                    );
                })
            }
        </div>
    </div>
</nav>

<style>
    /* Calendar Animation - More dramatic */
    .nav-link.loading .calendar-line-1,
    .nav-link.loading .calendar-line-2 {
        animation: calendar-bounce 0.5s ease-in-out infinite alternate;
        transform-origin: bottom;
    }

    .nav-link.loading .calendar-line-2 {
        animation-delay: 0.15s;
    }

    .nav-link.loading .calendar-body {
        animation: calendar-shake 0.6s ease-in-out infinite;
    }

    .nav-link.loading .calendar-divider {
        animation: calendar-divider-slide 0.8s ease-in-out infinite alternate;
    }

    .nav-link.loading .calendar-fold {
        animation: calendar-fold-flip 0.7s ease-in-out infinite;
    }

    @keyframes calendar-bounce {
        0% {
            transform: translateY(0) scaleY(1);
        }
        100% {
            transform: translateY(-3px) scaleY(1.2);
        }
    }

    @keyframes calendar-shake {
        0%,
        100% {
            transform: translateX(0);
        }
        25% {
            transform: translateX(-1px);
        }
        75% {
            transform: translateX(1px);
        }
    }

    @keyframes calendar-divider-slide {
        0% {
            transform: scaleX(1);
            opacity: 1;
        }
        100% {
            transform: scaleX(0.7);
            opacity: 0.5;
        }
    }

    @keyframes calendar-fold-flip {
        0%,
        100% {
            transform: rotate(0deg) scale(1);
            opacity: 1;
        }
        50% {
            transform: rotate(15deg) scale(1.1);
            opacity: 0.6;
        }
    }

    /* Search Animation - Keep as is since it works well */
    .nav-link.loading .search-circle {
        animation: search-pulse 1s ease-in-out infinite;
    }

    .nav-link.loading .search-handle {
        animation: search-wiggle 0.5s ease-in-out infinite;
    }

    @keyframes search-pulse {
        0%,
        100% {
            stroke-width: 2;
            opacity: 1;
        }
        50% {
            stroke-width: 3;
            opacity: 0.7;
        }
    }

    @keyframes search-wiggle {
        0%,
        100% {
            transform: rotate(0deg);
        }
        25% {
            transform: rotate(-5deg);
        }
        75% {
            transform: rotate(5deg);
        }
    }

    /* Bookmark Animation - Extremely dramatic */
    .nav-link.loading .bookmark-body {
        animation: bookmark-bounce 0.4s ease-in-out infinite alternate;
        transform-origin: center bottom;
    }

    @keyframes bookmark-bounce {
        0% {
            fill: none;
            stroke-width: 2;
            transform: scale(1) rotate(0deg) translateY(0px);
            opacity: 1;
        }
        25% {
            fill: rgba(147, 51, 234, 0.2);
            stroke-width: 3;
            transform: scale(1.2) rotate(-10deg) translateY(-3px);
            opacity: 0.8;
        }
        75% {
            fill: rgba(147, 51, 234, 0.6);
            stroke-width: 2.5;
            transform: scale(1.4) rotate(10deg) translateY(-6px);
            opacity: 0.6;
        }
        100% {
            fill: currentColor;
            stroke-width: 1.5;
            transform: scale(1.6) rotate(0deg) translateY(-8px);
            opacity: 1;
        }
    }

    /* General loading state */
    .nav-link.loading {
        animation: nav-loading-bounce 0.6s ease-in-out infinite alternate;
    }

    @keyframes nav-loading-bounce {
        0% {
            transform: scale(1);
        }
        100% {
            transform: scale(1.05);
        }
    }
</style>

<script>
    // Enhanced navigation feedback
    function initNavigationFeedback() {
        const navLinks = document.querySelectorAll('.nav-link');

        navLinks.forEach((link) => {
            let isNavigating = false;

            link.addEventListener('click', function (e) {
                // Prevent double clicks
                if (isNavigating) {
                    e.preventDefault();
                    return;
                }

                // Don't show loading for same page
                if (link.getAttribute('aria-current') === 'page') {
                    return;
                }

                // Track navigation
                const href = link.getAttribute('href');
                if (href && typeof window !== 'undefined' && window.umami) {
                    window.umami.track('navigate', {
                        page: href,
                        source: 'nav'
                    });
                }

                isNavigating = true;

                // Add haptic feedback if available
                if ('vibrate' in navigator) {
                    navigator.vibrate(50);
                }

                // Add loading state with icon animation
                link.classList.add('loading', 'scale-95', 'opacity-75');

                // Dim the text
                const text = link.querySelector('.nav-text');
                if (text) {
                    text.classList.add('opacity-50');
                }

                // Reset after a short delay (in case navigation is very fast)
                setTimeout(() => {
                    isNavigating = false;
                    link.classList.remove('loading', 'scale-95', 'opacity-75');
                    if (text) {
                        text.classList.remove('opacity-50');
                    }
                }, 2000);
            });

            // Add touch feedback
            link.addEventListener('touchstart', function () {
                (link as HTMLElement).style.transform = 'scale(0.95)';
            });

            link.addEventListener('touchend', function () {
                setTimeout(() => {
                    (link as HTMLElement).style.transform = '';
                }, 100);
            });
        });
    }

    // Initialize on page load
    initNavigationFeedback();

    // Re-initialize on view transitions
    document.addEventListener('astro:page-load', initNavigationFeedback);

    // Hide navigation when mobile keyboard is active
    function initKeyboardDetection() {
        const navigation = document.getElementById('bottom-navigation')!;
        if (!navigation) return;

        let initialViewportHeight = window.visualViewport?.height || window.innerHeight;
        let isKeyboardVisible = false;

        // Function to hide/show navigation based on keyboard state
        function toggleNavigation(hide: boolean) {
            if (hide && !isKeyboardVisible) {
                // Ensure transition is applied before transform
                navigation.style.transition = 'transform 300ms ease-out';
                // Use requestAnimationFrame to ensure smooth animation
                requestAnimationFrame(() => {
                    navigation.style.transform = 'translateY(100%)';
                });
                isKeyboardVisible = true;
            } else if (!hide && isKeyboardVisible) {
                // Ensure transition is applied before transform
                navigation.style.transition = 'transform 300ms ease-out';
                // Use requestAnimationFrame to ensure smooth animation
                requestAnimationFrame(() => {
                    navigation.style.transform = 'translateY(0)';
                });
                isKeyboardVisible = false;
            }
        }

        // Method 1: Visual Viewport API (most reliable for modern browsers)
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', () => {
                const currentHeight = window.visualViewport?.height || 0;
                const heightDifference = initialViewportHeight - currentHeight;

                // If viewport height decreased significantly (keyboard appeared)
                if (heightDifference > 150) {
                    toggleNavigation(true);
                } else {
                    toggleNavigation(false);
                }
            });
        }

        // Method 2: Focus/Blur events on input elements (fallback)
        let keyboardTimeout: number;

        function handleInputFocus() {
            clearTimeout(keyboardTimeout);
            keyboardTimeout = window.setTimeout(() => {
                toggleNavigation(true);
            }, 300); // Small delay to ensure keyboard animation
        }

        function handleInputBlur() {
            clearTimeout(keyboardTimeout);
            keyboardTimeout = window.setTimeout(() => {
                toggleNavigation(false);
            }, 300);
        }

        // Listen for focus/blur on all input elements
        document.addEventListener('focusin', (e) => {
            const target = e.target as HTMLElement;
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.contentEditable === 'true') {
                handleInputFocus();
            }
        });

        document.addEventListener('focusout', (e) => {
            const target = e.target as HTMLElement;
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.contentEditable === 'true') {
                handleInputBlur();
            }
        });

        // Method 3: Window resize fallback for older browsers
        if (!window.visualViewport) {
            let windowHeight = window.innerHeight;

            window.addEventListener('resize', () => {
                const currentHeight = window.innerHeight;
                const heightDifference = windowHeight - currentHeight;

                if (heightDifference > 150) {
                    toggleNavigation(true);
                } else if (heightDifference < -100) {
                    toggleNavigation(false);
                }
            });
        }

        // Update initial height on orientation change
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                initialViewportHeight = window.visualViewport?.height || window.innerHeight;
                toggleNavigation(false); // Reset navigation position
            }, 500);
        });
    }

    // Initialize keyboard detection
    initKeyboardDetection();

    // Re-initialize on view transitions
    document.addEventListener('astro:page-load', initKeyboardDetection);
</script>
