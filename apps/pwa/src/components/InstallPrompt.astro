---
interface Props {
    debug?: boolean;
}
---

{/* Install prompt */}
<div
    id="install-prompt"
    class="hidden fixed bottom-20 left-4 right-4 sm:left-auto sm:right-4 sm:bottom-4 sm:w-96 bg-white rounded-xl shadow-2xl p-4 transform transition-all duration-300 z-50"
>
    <div class="flex items-start gap-4">
        <div class="flex-shrink-0">
            <img src="/icons/icon-192x192.png" alt="Cebby App Icon" class="w-16 h-16 rounded-xl" />
        </div>
        <div class="flex-1">
            <h3 class="text-lg font-semibold text-gray-900">Install Cebby</h3>
            <p class="text-sm text-gray-600 mt-1">
                Add Cebby to your home screen for quick access to tech events in Cebu
            </p>
            <div class="flex gap-2 mt-3">
                <button
                    id="install-button"
                    class="flex-1 bg-cebby-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-cebby-primary-dark transition-colors"
                >
                    Install
                </button>
                <button
                    id="close-prompt"
                    class="px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors"
                >
                    Maybe later
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Make deferredPrompt accessible in window for debugging
    declare global {
        interface Window {
            deferredPrompt: any;
            debugInstall?: () => void;
        }
    }

    // Initialize deferredPrompt
    window.deferredPrompt = null;

    // Listen for beforeinstallprompt event
    window.addEventListener('beforeinstallprompt', (e) => {
        console.log('üëã beforeinstallprompt event was fired');
        // Prevent Chrome 67 and earlier from automatically showing the prompt
        e.preventDefault();
        // Stash the event so it can be triggered later
        window.deferredPrompt = e;

        // Show the install prompt immediately if in debug mode
        if (document.getElementById('debug-show-prompt')) {
            const prompt = document.getElementById('install-prompt');
            if (prompt) {
                prompt.classList.remove('hidden');
                prompt.classList.add('animate-slide-up');
            }
        } else {
            // Show the install prompt after a delay in production
            setTimeout(() => {
                const prompt = document.getElementById('install-prompt');
                if (prompt && !localStorage.getItem('installPromptDismissed')) {
                    prompt.classList.remove('hidden');
                    prompt.classList.add('animate-slide-up');
                }
            }, 3000);
        }
    });

    // Installation button click handler with retry logic
    const installButton = document.getElementById('install-button');
    if (installButton) {
        installButton.addEventListener('click', async () => {
            console.log('üì± Install button clicked');
            console.log('Current deferredPrompt:', window.deferredPrompt);

            try {
                if (!window.deferredPrompt) {
                    console.log('‚ùå No deferred prompt available');
                    return;
                }

                // Show the install prompt
                console.log('üéØ Triggering prompt...');
                const promptEvent = window.deferredPrompt;
                window.deferredPrompt = null; // Clear it first

                try {
                    // Show the prompt
                    await promptEvent.prompt();
                    console.log('üéØ Prompt shown successfully');

                    // Wait for the user to respond to the prompt
                    const choiceResult = await promptEvent.userChoice;
                    console.log('üë§ User choice result:', choiceResult);

                    if (choiceResult.outcome === 'accepted') {
                        console.log('‚úÖ User accepted the installation');
                    } else {
                        console.log('‚ùå User declined the installation');
                    }
                } catch (promptError) {
                    console.error('‚ùå Error showing prompt:', promptError);
                    // Try to show the native install prompt as fallback
                    try {
                        const manifestLink = document.querySelector('link[rel="manifest"]') as HTMLLinkElement;
                        if (manifestLink) {
                            console.log('üîÑ Attempting manual install...');
                            window.location.href = manifestLink.href;
                        }
                    } catch (fallbackError) {
                        console.error('‚ùå Fallback also failed:', fallbackError);
                    }
                }

                // Hide our custom prompt regardless of the outcome
                const prompt = document.getElementById('install-prompt');
                if (prompt) {
                    prompt.classList.add('animate-slide-down');
                    setTimeout(() => prompt.classList.add('hidden'), 300);
                }
            } catch (error) {
                console.error('‚ùå Error during installation:', error);
            }
        });
    }

    // Close button click handler
    document.getElementById('close-prompt')?.addEventListener('click', () => {
        console.log('‚ùå Install prompt dismissed by user');
        const prompt = document.getElementById('install-prompt');
        if (prompt) {
            prompt.classList.add('animate-slide-down');
            setTimeout(() => prompt.classList.add('hidden'), 300);
            // Remember that user dismissed the prompt
            localStorage.setItem('installPromptDismissed', 'true');
        }
    });

    // Handle successful installation
    window.addEventListener('appinstalled', (event) => {
        console.log('üéâ PWA was installed successfully');
        const prompt = document.getElementById('install-prompt');
        if (prompt) {
            prompt.classList.add('hidden');
        }
    });

    // Add debug function to window
    window.debugInstall = () => {
        console.log('üîç Current deferredPrompt:', window.deferredPrompt);
        console.log('üì± Install criteria:');
        console.log('- Display mode:', window.matchMedia('(display-mode: standalone)').matches);
        console.log('- Service Worker:', 'serviceWorker' in navigator);
        console.log('- HTTPS:', window.location.protocol === 'https:');
        console.log('- Manifest:', !!document.querySelector('link[rel="manifest"]'));
    };

    // Debug button handler
    document.getElementById('debug-show-prompt')?.addEventListener('click', () => {
        console.log('üîç Debug button clicked');
        window.debugInstall?.();
        const prompt = document.getElementById('install-prompt');
        if (prompt) {
            prompt.classList.remove('hidden');
            prompt.classList.add('animate-slide-up');
        }
    });
</script>

<style>
    .animate-slide-up {
        animation: slideUp 0.3s ease-out forwards;
    }

    .animate-slide-down {
        animation: slideDown 0.3s ease-out forwards;
    }

    @keyframes slideUp {
        from {
            transform: translateY(100%);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @keyframes slideDown {
        from {
            transform: translateY(0);
            opacity: 1;
        }
        to {
            transform: translateY(100%);
            opacity: 0;
        }
    }
</style>
