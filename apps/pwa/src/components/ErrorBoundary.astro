---
export interface Props {
    fallback?: string;
    onError?: (error: Error) => void;
}

const { fallback = "Something went wrong. Please refresh the page.", onError } = Astro.props;
---

<div class="error-boundary">
    <slot />
</div>

<script>
    // Define error boundary functionality in global scope
    window.errorBoundary = {
        showErrorMessage: function(message) {
            console.log('üö® ErrorBoundary: Showing error message:', message);
            
            // Create or update error toast
            let errorToast = document.getElementById('error-toast');
            
            if (!errorToast) {
                errorToast = document.createElement('div');
                errorToast.id = 'error-toast';
                errorToast.className = 'fixed top-4 right-4 z-[9999] max-w-sm w-full';
                errorToast.style.display = 'block';
                document.body.appendChild(errorToast);
            }

            errorToast.innerHTML = `
                <div class="bg-red-50 border border-red-200 rounded-xl shadow-lg p-4 animate-pulse">
                    <div class="flex items-start space-x-3">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <h4 class="text-sm font-semibold text-red-800 mb-1">‚ö†Ô∏è Error Caught!</h4>
                            <p class="text-sm text-red-700">${message}</p>
                            <p class="text-xs text-red-600 mt-1">Check console for details</p>
                        </div>
                        <button onclick="document.getElementById('error-toast').style.display = 'none'" class="flex-shrink-0 text-red-600 hover:text-red-800 transition-colors">
                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>
                </div>
            `;
            
            // Make sure it's visible
            errorToast.style.display = 'block';
            errorToast.style.opacity = '1';
            errorToast.style.visibility = 'visible';
            
            // Remove the animation after showing
            setTimeout(() => {
                const toastDiv = errorToast.querySelector('div');
                if (toastDiv) {
                    toastDiv.classList.remove('animate-pulse');
                }
            }, 1000);

            // Auto-hide after 8 seconds (longer for testing)
            setTimeout(() => {
                if (errorToast && errorToast.style.display !== 'none') {
                    errorToast.style.display = 'none';
                }
            }, 8000);
        }
    };

    // Global error handler
    window.addEventListener('error', (event) => {
        console.error('üö® Global error caught:', event.error);
        console.log('Error details:', {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: event.error
        });
        
        window.errorBoundary.showErrorMessage(event.error?.message || event.message || 'An unknown error occurred');
        
        // Prevent default browser error handling
        return true;
    });

    window.addEventListener('unhandledrejection', (event) => {
        console.error('üö® Unhandled promise rejection:', event.reason);
        
        const message = event.reason?.message || event.reason || 'Promise rejection occurred';
        window.errorBoundary.showErrorMessage(`Promise Error: ${message}`);
        
        // Prevent default browser handling
        event.preventDefault();
    });

    // Listen for custom logger events
    window.addEventListener('app-error', (event) => {
        console.error('üö® Custom app error:', event.detail);
        
        const { message, context } = event.detail;
        window.errorBoundary.showErrorMessage(`App Error: ${message}`);
    });

    console.log('‚úÖ Error boundary initialized');
</script>

<style>
    .error-boundary {
        position: relative;
    }
</style>