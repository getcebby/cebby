---
interface Props {
    initialQuery?: string;
    showFullSearch?: boolean;
}

const { initialQuery = '', showFullSearch = false } = Astro.props;
---

<div class="relative w-full" data-show-full-search={showFullSearch}>
    <div class="relative">
        <input
            type="search"
            id="search-input"
            class="w-full px-4 py-3 pl-12 text-sm bg-white/90 backdrop-blur border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 transition-all duration-200"
            placeholder="Search events, organizations, or topics..."
            value={initialQuery}
        />

        <!-- Search Icon -->
        <div class="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </div>

        <!-- Loading Spinner -->
        <div id="search-loading" class="absolute right-4 top-1/2 -translate-y-1/2 hidden">
            <div class="animate-spin w-4 h-4 border-2 border-purple-500 border-t-transparent rounded-full"></div>
        </div>
    </div>

    <!-- Search Results -->
    <div
        id="search-results"
        class="absolute left-0 right-0 mt-2 bg-white/95 backdrop-blur-md border border-gray-100 rounded-xl shadow-xl z-50 hidden"
    >
        <div
            id="results-content"
            class="max-h-[420px] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent"
        >
            <!-- Results will be populated here -->
        </div>
    </div>
</div>

<script>
    import type { EventDocument } from '../lib/typesense';
    interface SearchResponse {
        results: EventDocument[];
        found: number;
        search_time_ms: number;
        error?: string;
    }

    let searchTimeout: number;
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results');
    const resultsContent = document.getElementById('results-content');
    const searchLoading = document.getElementById('search-loading');

    // Read showFullSearch from data attribute
    const showFullSearch = searchInput?.closest('[data-show-full-search]')?.getAttribute('data-show-full-search') === 'true';

    console.log('ðŸš€ ~ showFullSearch:', showFullSearch);
    searchInput?.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value;

        // Clear previous timeout
        clearTimeout(searchTimeout);

        if (query.length < 2) {
            searchResults?.classList.add('hidden');
            searchLoading?.classList.add('hidden');
            return;
        }

        // Show loading spinner
        searchLoading?.classList.remove('hidden');

        // Set new timeout for debouncing
        searchTimeout = window.setTimeout(async () => {
            try {
                const response = await fetch(`/api/search?q=${encodeURIComponent(query)}&per_page=6`);
                const data = (await response.json()) as SearchResponse;

                // Hide loading spinner
                searchLoading?.classList.add('hidden');

                if (resultsContent && searchResults) {
                    if (data.results && data.results.length > 0) {
                        resultsContent.innerHTML = `
                            <!-- Search Stats -->
                            <div class="px-4 py-3 border-b border-gray-50 bg-gradient-to-r from-purple-50 to-blue-50">
                                <div class="flex items-center justify-between">
                                    <div class="text-sm font-medium text-gray-700">
                                        Found ${data.found} event${data.found !== 1 ? 's' : ''}
                                    </div>
                                    <div class="text-xs text-gray-500 bg-white px-2 py-1 rounded-full">
                                        ${data.search_time_ms}ms
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Results -->
                            <div class="divide-y divide-gray-50">
                                ${data.results
                                    .map((event, index) => {
                                        const eventDate = new Date(event.start_time * 1000);
                                        const isUpcoming = eventDate > new Date();
                                        const dateStr = eventDate.toLocaleDateString('en-US', {
                                            month: 'short',
                                            day: 'numeric',
                                            year:
                                                eventDate.getFullYear() !== new Date().getFullYear()
                                                    ? 'numeric'
                                                    : undefined,
                                        });

                                        return `
                                        <a href="/events/${event.slug || event.id}" 
                                           class="group block p-4 hover:bg-gradient-to-r hover:from-purple-50/50 hover:to-blue-50/50 transition-all duration-200 hover:border-l-2 hover:border-purple-400">
                                            <div class="flex gap-4">
                                                <div class="flex-shrink-0 relative">
                                                    ${
                                                        event.cover_photo
                                                            ? `<img src="${event.cover_photo}" alt="${event.name}" 
                                                             class="w-16 h-16 object-cover rounded-xl border border-gray-100 group-hover:shadow-md transition-shadow duration-200" loading="lazy" />`
                                                            : `<div class="w-16 h-16 bg-gradient-to-br from-purple-100 via-purple-50 to-blue-50 rounded-xl border border-gray-100 flex items-center justify-center group-hover:shadow-md transition-shadow duration-200">
                                                             <svg class="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                                             </svg>
                                                           </div>`
                                                    }
                                                    ${
                                                        isUpcoming
                                                            ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-green-400 border-2 border-white rounded-full"></div>'
                                                            : '<div class="absolute -top-1 -right-1 w-3 h-3 bg-gray-300 border-2 border-white rounded-full"></div>'
                                                    }
                                                </div>
                                                
                                                <div class="flex-1 min-w-0">
                                                    <div class="flex items-start justify-between gap-2">
                                                        <h3 class="font-semibold text-gray-900 line-clamp-2 group-hover:text-purple-700 transition-colors leading-tight max-w-md">
                                                            ${event.name}
                                                        </h3>
                                                        <span class="${isUpcoming ? 'text-green-600 bg-green-50' : 'text-gray-500 bg-gray-50'} text-xs px-2 py-1 rounded-full font-medium whitespace-nowrap">
                                                            ${isUpcoming ? 'Upcoming' : 'Past'}
                                                        </span>
                                                    </div>
                                                    
                                                    <div class="flex items-center gap-3 mt-2 text-sm text-gray-600">
                                                        <div class="flex items-center gap-1.5">
                                                            <svg class="w-3.5 h-3.5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                                            </svg>
                                                            <span class="font-medium">${dateStr}</span>
                                                        </div>
                                                        
                                                        <div class="flex items-center gap-1.5 min-w-0 flex-1">
                                                            <svg class="w-3.5 h-3.5 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                                                            </svg>
                                                            <span class="truncate text-gray-500">${event.location || 'TBA'}</span>
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="flex items-center justify-between mt-3">
                                                        <span class="text-xs font-medium text-purple-600 bg-purple-50 px-2 py-1 rounded-full truncate max-w-[250px] ${event.organization ? '' : 'hidden'} " title="${event.organization}">
                                                            ${event.organization}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </a>
                                        `;
                                    })
                                    .join('')}
                            </div>
                            
                            ${
                                data.found > 6 && !showFullSearch
                                    ? `
                                <div class="p-4 text-center border-t border-gray-50 bg-gray-50/50">
                                    <a href="/search?q=${encodeURIComponent(query)}" 
                                       class="text-sm font-medium text-purple-600 hover:text-purple-700 transition-colors">
                                        View all ${data.found} results â†’
                                    </a>
                                </div>
                            `
                                    : ''
                            }
                        `;
                        searchResults.classList.remove('hidden');
                    } else {
                        resultsContent.innerHTML = `
              <div class="text-center p-8">
                <div class="bg-gray-50 rounded-xl p-6 mx-auto">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="32"
                    height="32"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="mx-auto text-gray-400 mb-4"
                  >
                    <circle cx="11" cy="11" r="8"></circle>
                    <path d="m21 21-4.3-4.3"></path>
                  </svg>

                  <h3 class="text-xl font-semibold text-gray-900 mb-2">
                    No matching events found
                  </h3>

                  <p class="text-gray-600 mb-6">
                    Try adjusting your search terms or browse our upcoming events
                    below
                  </p>

                  <div class="space-y-4">
                    <a
                      href="https://dorelljames.notion.site/1363f8eda070806687bcfb7f10301128?pvs=105"
                      target="_blank"
                      class="inline-flex items-center text-sm text-gray-500 hover:text-purple-600 transition-colors"
                    >
                      <span>Have an idea for an event? Share it here ðŸ˜Š </span>
                      <svg class="w-3 h-3" viewBox="0 0 20 20" fill="currentColor">
                        <path
                          fill-rule="evenodd"
                          d="M5.22 14.78a.75.75 0 001.06 0l7.22-7.22v5.69a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75h-7.5a.75.75 0 000 1.5h5.69l-7.22 7.22a.75.75 0 000 1.06z"
                          clip-rule="evenodd"></path>
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            `;
                        searchResults.classList.remove('hidden');
                    }
                }
            } catch (error) {
                console.error('Search error:', error);
                // Hide loading spinner on error
                searchLoading?.classList.add('hidden');

                if (resultsContent && searchResults) {
                    resultsContent.innerHTML = `
                        <div class="p-6 text-center">
                            <div class="text-red-500 mb-2">
                                <svg class="w-8 h-8 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </div>
                            <p class="text-sm text-gray-600">Search temporarily unavailable</p>
                        </div>
                    `;
                    searchResults.classList.remove('hidden');
                }
            }
        }, 250); // Debounce for 250ms
    });

    // Handle Enter key for full search mode
    searchInput?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            const query = (e.target as HTMLInputElement).value;
            if (query.trim()) {
                if (showFullSearch) {
                    // If we're in full search mode, update the current page
                    window.location.href = `/search?q=${encodeURIComponent(query.trim())}`;
                } else {
                    // If we're not in full search mode, go to search page
                    window.location.href = `/search?q=${encodeURIComponent(query.trim())}`;
                }
            }
        }
    });

    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
        if (!searchResults?.contains(e.target as Node) && !searchInput?.contains(e.target as Node)) {
            searchResults?.classList.add('hidden');
        }
    });
</script>
