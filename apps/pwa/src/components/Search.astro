---
interface Props {
    placeholder?: string;
}

const { placeholder = 'Search for events...' } = Astro.props;
---

<div>
    <!-- Search Trigger Button -->
    <button
        id="search-trigger"
        class="text-gray-700 hover:text-cebby-primary transition-colors"
        aria-label="Open search"
    >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
    </button>

    <!-- Search Modal -->
    <div id="search-modal" class="fixed inset-0 z-50 overflow-y-auto hidden" role="dialog" aria-modal="true">
        <!-- Background overlay -->
        <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>

        <!-- Modal panel -->
        <div class="relative min-h-screen flex items-start justify-center p-4">
            <div class="relative bg-white w-full max-w-2xl rounded-xl shadow-2xl transform transition-all mt-16">
                <!-- Search input -->
                <div class="p-4 border-b border-gray-200">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg
                                class="h-5 w-5 text-gray-400"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <input
                            type="text"
                            id="search-input"
                            class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-cebby-primary focus:border-cebby-primary text-lg"
                            placeholder={placeholder}
                            autocomplete="off"
                        />
                        <button
                            id="clear-search"
                            class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 hidden"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                    clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Quick filters -->
                <div class="px-4 py-3 border-b border-gray-200">
                    <div class="flex flex-wrap gap-2">
                        <button
                            class="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors"
                            data-filter="today"
                        >
                            Today
                        </button>
                        <button
                            class="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors"
                            data-filter="this-week"
                        >
                            This Week
                        </button>
                        <button
                            class="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors"
                            data-filter="weekend"
                        >
                            Weekend
                        </button>
                        <button
                            class="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors"
                            data-filter="free"
                        >
                            Free Events
                        </button>
                    </div>
                </div>

                <!-- Search results -->
                <div id="search-results" class="max-h-[60vh] overflow-y-auto p-4">
                    <div class="space-y-4">
                        <!-- Initial state -->
                        <div id="initial-state" class="text-center py-8">
                            <svg
                                class="mx-auto h-12 w-12 text-gray-400"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                aria-hidden="true"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">Start typing to search</h3>
                            <p class="mt-1 text-sm text-gray-500">Search for events by title, location, or category</p>
                        </div>

                        <!-- Loading state -->
                        <div id="loading-state" class="hidden text-center py-8">
                            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-cebby-primary mx-auto">
                            </div>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">Searching...</h3>
                        </div>

                        <!-- No results state -->
                        <div id="no-results-state" class="hidden text-center py-8">
                            <svg
                                class="mx-auto h-12 w-12 text-gray-400"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                ></path>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No events found</h3>
                            <p class="mt-1 text-sm text-gray-500">Try adjusting your search terms</p>
                        </div>

                        <!-- Results list -->
                        <div id="results-list" class="hidden divide-y divide-gray-200">
                            <!-- Results will be dynamically inserted here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    interface SearchResult {
        slug: string;
        title: string;
        date: string;
        location: string;
        image: string;
        category: string;
    }

    let debounceTimeout: ReturnType<typeof setTimeout>;
    const searchModal = document.getElementById('search-modal');
    const searchTrigger = document.getElementById('search-trigger');
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const clearSearch = document.getElementById('clear-search');
    const initialState = document.getElementById('initial-state');
    const loadingState = document.getElementById('loading-state');
    const noResultsState = document.getElementById('no-results-state');
    const resultsList = document.getElementById('results-list');

    // Open search modal
    searchTrigger?.addEventListener('click', () => {
        searchModal?.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        searchInput?.focus();
    });

    // Close search modal when clicking outside
    searchModal?.addEventListener('click', (e) => {
        if (e.target === searchModal) {
            closeSearchModal();
        }
    });

    // Close with Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !searchModal?.classList.contains('hidden')) {
            closeSearchModal();
        }
    });

    // Handle search input
    searchInput?.addEventListener('input', (e) => {
        const input = e.target as HTMLInputElement;
        const query = input.value.trim();

        // Show/hide clear button
        if (clearSearch) {
            clearSearch.style.display = query.length > 0 ? 'flex' : 'none';
        }

        // Debounce search
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => {
            if (query.length >= 2) {
                performSearch(query);
            } else {
                showInitialState();
            }
        }, 300);
    });

    // Clear search
    clearSearch?.addEventListener('click', () => {
        if (searchInput) {
            searchInput.value = '';
            searchInput.focus();
        }
        clearSearch.style.display = 'none';
        showInitialState();
    });

    // Handle filter clicks
    document.querySelectorAll('[data-filter]').forEach((button) => {
        button.addEventListener('click', (e) => {
            const filter = (e.currentTarget as HTMLElement).dataset.filter;
            if (searchInput) {
                searchInput.value = filter || '';
                performSearch(filter || '');
            }
        });
    });

    function closeSearchModal() {
        searchModal?.classList.add('hidden');
        document.body.style.overflow = '';
        if (searchInput) {
            searchInput.value = '';
        }
        if (clearSearch) {
            clearSearch.style.display = 'none';
        }
        showInitialState();
    }

    function showInitialState() {
        if (initialState && loadingState && noResultsState && resultsList) {
            initialState.classList.remove('hidden');
            loadingState.classList.add('hidden');
            noResultsState.classList.add('hidden');
            resultsList.classList.add('hidden');
        }
    }

    function showLoadingState() {
        if (initialState && loadingState && noResultsState && resultsList) {
            initialState.classList.add('hidden');
            loadingState.classList.remove('hidden');
            noResultsState.classList.add('hidden');
            resultsList.classList.add('hidden');
        }
    }

    function showNoResults() {
        if (initialState && loadingState && noResultsState && resultsList) {
            initialState.classList.add('hidden');
            loadingState.classList.add('hidden');
            noResultsState.classList.remove('hidden');
            resultsList.classList.add('hidden');
        }
    }

    function showResults() {
        if (initialState && loadingState && noResultsState && resultsList) {
            initialState.classList.add('hidden');
            loadingState.classList.add('hidden');
            noResultsState.classList.add('hidden');
            resultsList.classList.remove('hidden');
        }
    }

    async function performSearch(query: string) {
        showLoadingState();

        try {
            const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
            const data = (await response.json()) as SearchResult[];

            if (!data || data.length === 0) {
                showNoResults();
                return;
            }

            if (resultsList) {
                resultsList.innerHTML = data
                    .map(
                        (event: SearchResult) => `
                        <a href="/events/${event.slug}" class="block hover:bg-gray-50 p-4 -m-4 transition-colors rounded-lg">
                            <div class="flex items-start gap-4">
                                <img src="${event.image}" alt="${event.title}" class="w-16 h-16 object-cover rounded-lg flex-shrink-0" />
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm font-medium text-gray-900 truncate">${event.title}</p>
                                    <p class="text-sm text-gray-500 mt-1">${event.date}</p>
                                    <p class="text-sm text-gray-500 mt-1">${event.location}</p>
                                </div>
                                <div class="flex-shrink-0">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${event.category}-light text-${event.category}">
                                        ${event.category}
                                    </span>
                                </div>
                            </div>
                        </a>
                    `
                    )
                    .join('');
            }

            showResults();
        } catch (error) {
            console.error('Search error:', error);
            showNoResults();
        }
    }
</script>

<style>
    /* Fade in animation for modal */
    #search-modal {
        animation: fadeIn 0.2s ease-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    /* Custom scrollbar for results */
    #search-results {
        scrollbar-width: thin;
        scrollbar-color: #9333ea #f3f4f6;
    }

    #search-results::-webkit-scrollbar {
        width: 6px;
    }

    #search-results::-webkit-scrollbar-track {
        background: #f3f4f6;
        border-radius: 3px;
    }

    #search-results::-webkit-scrollbar-thumb {
        background-color: #9333ea;
        border-radius: 3px;
    }
</style>
