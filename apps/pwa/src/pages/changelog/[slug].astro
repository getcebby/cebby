---
export const prerender = true;

import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
    const changelogEntries = await getCollection('changelog');
    console.log(
        'Found changelog entries:',
        changelogEntries.map((e) => e.slug),
    );

    return changelogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

// Get the current slug for debugging
const { slug } = Astro.params;
const { entry } = Astro.props;

// Safely render content if entry exists
let Content;
if (entry) {
    try {
        const rendered = await entry.render();
        Content = rendered.Content;
    } catch (error) {
        console.error(`Error rendering content for slug ${slug}:`, error);
    }
}
---

<Layout title={entry ? `${entry.data.title} | Changelog | Cebby` : 'Changelog Entry Not Found | Cebby'}>
    <div class="max-w-4xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
        <a
            href="/changelog"
            class="inline-flex items-center text-sm font-medium text-purple-600 hover:text-purple-800 transition-colors mb-8 group"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 mr-2 group-hover:translate-x-[-2px] transition-transform"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
            >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Changelog
        </a>

        {
            entry ? (
                <article class="prose prose-lg prose-purple max-w-none">
                    <header class="mb-10 not-prose">
                        <h1 class="text-3xl sm:text-4xl font-bold mb-6 text-gray-900 leading-tight">
                            {entry.data.title}
                        </h1>

                        <div class="flex flex-wrap items-center gap-5 mb-6">
                            <time datetime={entry.data.date.toISOString()} class="flex items-center text-gray-600">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-4 w-4 mr-2"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                                    />
                                </svg>
                                {entry.data.date.toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric',
                                })}
                            </time>

                            {entry.data.version && (
                                <span class="flex items-center bg-purple-50 text-purple-800 px-3 py-1 rounded-full font-medium">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="h-4 w-4 mr-1"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
                                        />
                                    </svg>
                                    v{entry.data.version}
                                </span>
                            )}

                            {entry.data.author && (
                                <span class="flex items-center text-gray-600">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="h-4 w-4 mr-1"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                                        />
                                    </svg>
                                    by {entry.data.author}
                                </span>
                            )}
                        </div>

                        {entry.data.tags && entry.data.tags.length > 0 && (
                            <div class="flex flex-wrap gap-2 mb-6">
                                {entry.data.tags.map((tag) => (
                                    <span class="text-xs bg-gray-100 text-gray-800 px-3 py-1 rounded-full font-medium">
                                        {tag}
                                    </span>
                                ))}
                            </div>
                        )}

                        {entry.data.description && (
                            <p class="text-lg text-gray-700 leading-relaxed border-l-4 border-purple-200 pl-4 py-2 bg-purple-50 rounded-r-md">
                                {entry.data.description}
                            </p>
                        )}
                    </header>

                    <div class="changelog-content prose prose-headings:font-semibold prose-headings:text-gray-900 prose-p:text-gray-700 prose-a:text-purple-600 prose-a:no-underline hover:prose-a:underline prose-img:rounded-lg prose-img:shadow-md max-w-none">
                        {Content && <Content />}
                    </div>
                </article>
            ) : (
                <div class="text-center py-16 bg-gray-50 rounded-lg border border-gray-100 shadow-sm">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-16 w-16 text-gray-300 mx-auto mb-4"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1"
                            d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                    </svg>
                    <h1 class="text-2xl font-bold text-gray-800 mb-4">Entry Not Found</h1>
                    <p class="text-gray-600 max-w-md mx-auto">
                        The requested changelog entry "{slug}" couldn't be found or loaded.
                    </p>
                    <p class="text-sm text-gray-500 mt-2 mb-6">
                        Please check that the URL is correct or return to the changelog index.
                    </p>
                    <a
                        href="/changelog"
                        class="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors"
                    >
                        Return to Changelog
                    </a>
                </div>
            )
        }
    </div>

    <style>
        .changelog-content :global(h2) {
            font-size: 1.75rem;
            margin-top: 2rem;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .changelog-content :global(h3) {
            font-size: 1.25rem;
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
        }

        .changelog-content :global(ul) {
            margin-top: 1rem;
            margin-bottom: 1rem;
        }

        .changelog-content :global(li) {
            margin-bottom: 0.5rem;
        }

        .changelog-content :global(img) {
            border-radius: 0.5rem;
            margin: 1.5rem 0;
            box-shadow:
                0 4px 6px -1px rgba(0, 0, 0, 0.1),
                0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .changelog-content :global(pre) {
            border-radius: 0.5rem;
            margin: 1.5rem 0;
            padding: 1rem;
            background-color: #f9fafb;
            overflow-x: auto;
        }

        .changelog-content :global(code) {
            background-color: #f3f4f6;
            border-radius: 0.25rem;
            padding: 0.125rem 0.25rem;
            font-size: 0.875em;
        }

        .changelog-content :global(blockquote) {
            border-left: 4px solid #d8b4fe;
            padding-left: 1rem;
            font-style: italic;
            color: #4b5563;
            background-color: #faf5ff;
            border-radius: 0 0.5rem 0.5rem 0;
            padding: 0.75rem 1rem;
            margin: 1.5rem 0;
        }
    </style>
</Layout>
