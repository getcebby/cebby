---
import type { Event } from '@service/core/supabase/shared/types.ts';
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import Navigation from '../components/Navigation.astro';
import SEO from '../components/SEO.astro';
import { Image } from 'astro:assets';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isToday as isDateToday } from 'date-fns';
import { formatInTimeZone } from 'date-fns-tz';

// Get the date from URL or use current date
const urlParams = Astro.url.searchParams;
const dateParam = urlParams.get('date');
let selectedDate: Date;

try {
    selectedDate = dateParam ? new Date(dateParam) : new Date();
    // Check if date is valid
    if (isNaN(selectedDate.getTime())) {
        selectedDate = new Date();
    }
} catch {
    selectedDate = new Date();
}

// Get first and last day of selected month
const firstDayOfMonth = startOfMonth(selectedDate);
const lastDayOfMonth = endOfMonth(selectedDate);

// Update the date range for fetching events
const startDate = format(firstDayOfMonth, 'yyyy-MM-dd');
const endDate = format(lastDayOfMonth, 'yyyy-MM-dd');

// Update the Supabase query to fetch events for the extended date range
const { data: events = [] } = await supabase
    .from('events')
    .select('*')
    .gte('start_time', `${startDate}T00:00:00+00:00`)
    .lte('start_time', `${endDate}T23:59:59+00:00`)
    .order('start_time', { ascending: true });

// Group events by date considering Manila timezone
const eventsByDate =
    events?.reduce((acc: Record<string, Event[]>, event) => {
        if (event.start_time) {
            // Convert UTC time to Manila time
            const eventDate = formatInTimeZone(new Date(event.start_time), 'Asia/Manila', 'yyyy-MM-dd');

            if (!acc[eventDate]) {
                acc[eventDate] = [];
            }
            acc[eventDate].push(event);
        }
        return acc;
    }, {}) ?? {};

// Generate calendar data
function generateCalendarDays(month: number, year: number) {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);

    const days = eachDayOfInterval({
        start: firstDay,
        end: lastDay,
    });

    const startPadding = firstDay.getDay();
    const paddingDays = Array(startPadding).fill(null);

    return [...paddingDays, ...days];
}

// Get events for current month
function getEventsForDay(date: Date): Event[] {
    const dateStr = format(date, 'yyyy-MM-dd');
    return eventsByDate[dateStr] || [];
}

const calendarDays = generateCalendarDays(selectedDate.getMonth(), selectedDate.getFullYear());
const currentMonthName = format(selectedDate, 'MMMM');

const metaDescription =
    'View all tech events in Cebu in a calendar format. Plan ahead and never miss an upcoming tech event.';

// Add this helper function near your other functions
function getEventColor(eventType: string = 'default') {
    const colors = {
        default: {
            bg: 'bg-purple-50',
            text: 'text-purple-600',
            hover: 'hover:bg-purple-100',
        },
        workshop: {
            bg: 'bg-indigo-100',
            text: 'text-indigo-800',
            hover: 'hover:bg-indigo-200',
        },
        conference: {
            bg: 'bg-fuchsia-100',
            text: 'text-fuchsia-800',
            hover: 'hover:bg-fuchsia-200',
        },
        meetup: {
            bg: 'bg-violet-100',
            text: 'text-violet-800',
            hover: 'hover:bg-violet-200',
        },
    };
    return colors[eventType as keyof typeof colors] || colors.default;
}

// Add this helper function near your other functions
function getAllEventsGroupedByDate() {
    if (!events) return {};

    return events.reduce((acc: Record<string, Event[]>, event) => {
        if (event.start_time) {
            const dateStr = formatInTimeZone(new Date(event.start_time), 'Asia/Manila', 'yyyy-MM-dd');

            if (!acc[dateStr]) {
                acc[dateStr] = [];
            }
            acc[dateStr].push(event);
        }
        return acc;
    }, {});
}
---

<Layout title="Calendar of tech events in Cebu in one place - cebby">
    <SEO
        title="Calendar of tech events in Cebu in one place - cebby"
        slot="head"
        description={metaDescription}
        image="/og.png"
        type="website"
    />

    <main class="min-h-screen pb-16 sm:pb-0 pt-safe">
        <div class="mx-auto px-4 sm:px-6 lg:px-8 py-8 px-safe">
            <div class="flex flex-col sm:flex-row justify-between items-center mb-8">
                <div class="flex items-center gap-4">
                    <h1 class="text-4xl font-bold text-gray-900">
                        {currentMonthName}
                        <span class="text-gray-500">{selectedDate.getFullYear()}</span>
                    </h1>

                    <div class="hidden sm:flex items-center gap-2">
                        <button class="p-2 hover:bg-purple-50 rounded-lg transition-colors" data-nav="prev-month">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5 text-purple-700"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"></path></svg
                            >
                        </button>
                        <button class="p-2 hover:bg-purple-50 rounded-lg transition-colors" data-nav="next-month">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5 text-purple-700"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"></path></svg
                            >
                        </button>
                    </div>
                </div>

                <div class="flex items-center gap-8">
                    <a href="/events" class="flex-shrink-0 transition-transform hover:scale-105">
                        <img src="/logo.svg" alt="Tech Events Cebu" class="h-12 w-auto" />
                    </a>

                    <button
                        id="downloadBtn"
                        class="hidden sm:flex bg-[#8234E6] hover:bg-[#6c2bc0] text-white px-6 py-2.5 rounded-xl transition-all duration-200 items-center gap-2.5 font-medium shadow-sm hover:shadow-md hover:scale-[1.02]"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path
                                fill-rule="evenodd"
                                d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
                                clip-rule="evenodd"></path>
                        </svg>
                        Download as Image
                    </button>
                </div>
            </div>

            <!-- Desktop Calendar -->
            <div class="hidden lg:block">
                <div id="calendar-container" class="bg-white rounded-2xl shadow-lg p-8 relative border border-gray-100">
                    <div class="grid grid-cols-7 gap-4 mb-6">
                        {
                            ['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day) => (
                                <div class="text-center font-medium text-gray-500 text-sm">{day}</div>
                            ))
                        }
                    </div>

                    <div class="grid grid-cols-7 gap-4">
                        {
                            calendarDays.map((day) => {
                                if (!day) {
                                    return (
                                        <div class="aspect-square bg-gray-25 rounded-2xl border border-gray-50 opacity-50" />
                                    );
                                }

                                const dayEvents = getEventsForDay(day);
                                const isToday = isDateToday(day);
                                const dayNumber = format(day, 'd');
                                const hasEvents = dayEvents.length > 0;
                                const isPast = day < new Date(new Date().setHours(0, 0, 0, 0));

                                return (
                                    <div
                                        class={`aspect-square rounded-2xl border overflow-hidden relative
                      ${isPast ? 'border-gray-100' : 'border-gray-200'}
                      ${hasEvents ? 'bg-white' : 'bg-white opacity-75'}
                    `}
                                    >
                                        <div class="absolute top-0 left-0 right-0 bg-white z-10 p-2">
                                            <div class="flex justify-end">
                                                <div
                                                    class={`
                            w-7 h-7 flex items-center justify-center rounded-full
                            ${
                                isToday
                                    ? 'bg-[#8234E6] text-white ring-2 ring-purple-200'
                                    : hasEvents
                                      ? 'text-purple-500'
                                      : ''
                            }
                          `}
                                                >
                                                    <span
                                                        class={`text-sm font-medium
                              ${isToday ? '' : isPast ? 'text-gray-400' : 'text-gray-600'}
                            `}
                                                    >
                                                        {dayNumber}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="h-full pt-12 px-2 pb-2">
                                            <div class="h-full overflow-y-auto scrollbar-hide">
                                                <div class="space-y-2">
                                                    {dayEvents.map((event) => {
                                                        const eventTime = formatInTimeZone(
                                                            new Date(event.start_time!),
                                                            'Asia/Manila',
                                                            'h:mm a',
                                                        );
                                                        const eventColors = getEventColor();
                                                        const isSingleEvent = dayEvents.length === 1;

                                                        return (
                                                            <a
                                                                href={`/events/${event.id}`}
                                                                class={`block rounded-xl transition-all duration-200
                                  ${eventColors.bg} ${eventColors.hover}
                                  ${isToday ? 'ring-1 ring-purple-100' : ''}
                                  ${isSingleEvent ? 'h-full' : ''}
                                  hover:scale-[1.02]
                                `}
                                                            >
                                                                <div class={`${isSingleEvent ? 'h-full' : ''} p-2`}>
                                                                    <div
                                                                        class={`flex gap-2 ${isSingleEvent ? 'h-full flex-col' : ''}`}
                                                                    >
                                                                        {event?.cover_photo && (
                                                                            <div
                                                                                class={`relative overflow-hidden flex-shrink-0 bg-gray-100 rounded-lg
                                                                                ${isSingleEvent ? 'w-full aspect-[16/9]' : 'w-12 h-12'}`}
                                                                            >
                                                                                <Image
                                                                                    src={event.cover_photo}
                                                                                    alt={event.name}
                                                                                    width={isSingleEvent ? 320 : 48}
                                                                                    height={isSingleEvent ? 180 : 48}
                                                                                    class="absolute inset-0 w-full h-full object-cover"
                                                                                />
                                                                            </div>
                                                                        )}
                                                                        <div
                                                                            class={`min-w-0 flex-1 ${isSingleEvent ? 'flex flex-col justify-between' : ''}`}
                                                                        >
                                                                            <h3
                                                                                class={`font-semibold line-clamp-2 ${eventColors.text}
                                                                                ${isSingleEvent ? 'text-sm mt-2' : 'text-xs'}`}
                                                                            >
                                                                                {event.name}
                                                                            </h3>
                                                                            {isSingleEvent && event.description && (
                                                                                <p class="text-xs text-gray-600 line-clamp-1 mt-1">
                                                                                    {event.description}
                                                                                </p>
                                                                            )}
                                                                            <div class="flex items-center gap-1 mt-1">
                                                                                <span
                                                                                    class={`font-medium text-gray-500
                                                                                    ${isSingleEvent ? 'text-xs' : 'text-[10px]'}`}
                                                                                >
                                                                                    {event.location &&
                                                                                        `📍 ${event.location}`}
                                                                                </span>
                                                                            </div>
                                                                            <div class="flex items-center gap-1 mt-1">
                                                                                <span
                                                                                    class={`font-medium text-gray-500
                                                                                    ${isSingleEvent ? 'text-xs' : 'text-[10px]'}`}
                                                                                >
                                                                                    🕑 {eventTime}
                                                                                </span>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        );
                                                    })}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                );
                            })
                        }
                    </div>

                    <div class="mt-8 flex items-center justify-center gap-2 py-3 rounded-xl">
                        <div
                            class="text-sm font-medium bg-gradient-to-r from-purple-600 to-fuchsia-600 bg-clip-text text-transparent"
                        >
                            Crafted with
                        </div>
                        <div class="animate-pulse">❤️</div>
                        <div
                            class="text-sm font-medium bg-gradient-to-r from-purple-600 to-fuchsia-600 bg-clip-text text-transparent"
                        >
                            by <strong>cebby</strong>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Mobile Calendar -->
            <div class="block lg:hidden">
                <!-- Week Day Pager -->
                <div
                    data-day-picker
                    class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-lg mb-6 overflow-hidden sticky top-4 z-10 transition-transform duration-300 ease-in-out transform border border-gray-100"
                >
                    <div class="flex items-center justify-between px-4 py-3 border-b bg-purple-50/50">
                        <button class="p-2 hover:bg-white/50 rounded-lg transition-colors" data-nav="prev-month">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5 text-purple-700"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                                    clip-rule="evenodd"></path>
                            </svg>
                        </button>

                        <span class="text-sm font-semibold text-purple-900">
                            {format(selectedDate, 'MMMM yyyy')}
                        </span>

                        <button class="p-2 hover:bg-white/50 rounded-lg transition-colors" data-nav="next-month">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5 text-purple-700"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                    clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>

                    <div class="overflow-x-auto scrollbar-hide px-4 py-2">
                        <div class="flex gap-2 min-w-max">
                            {
                                eachDayOfInterval({
                                    start: firstDayOfMonth,
                                    end: lastDayOfMonth,
                                }).map((date) => {
                                    const isActive = isDateToday(date);
                                    const dayEvents = getEventsForDay(date);
                                    const hasEvents = dayEvents.length > 0;
                                    const isPast = date < new Date(new Date().setHours(0, 0, 0, 0));

                                    return (
                                        <button
                                            class={`
                        py-2 px-1 flex flex-col items-center gap-1
                        min-w-[3.5rem] rounded-2xl transition-all
                        ${isActive ? 'bg-purple-50/80' : 'hover:bg-purple-50/50'}
                      `}
                                            data-date={format(date, 'yyyy-MM-dd')}
                                        >
                                            <span
                                                class={`text-xs font-medium
                          ${isActive ? 'text-purple-700' : isPast ? 'text-gray-400' : 'text-gray-600'}`}
                                            >
                                                {format(date, 'EEE')}
                                            </span>
                                            <div
                                                class={`
                          w-8 h-8 flex items-center justify-center rounded-full
                          ${
                              isActive
                                  ? 'bg-[#8234E6] text-white ring-2 ring-purple-200'
                                  : hasEvents
                                    ? 'ring-2 ring-purple-200'
                                    : ''
                          }
                          ${isPast ? 'text-gray-400' : ''}
                        `}
                                            >
                                                <span class={isActive ? 'font-bold' : ''}>{format(date, 'd')}</span>
                                            </div>
                                            {hasEvents && (
                                                <div class="flex gap-0.5 mt-0.5">
                                                    {[...Array(Math.min(dayEvents.length, 3))].map(() => (
                                                        <div
                                                            class={`w-1 h-1 rounded-full
                                ${isActive ? 'bg-purple-500' : isPast ? 'bg-gray-300' : 'bg-[#8234E6]'}
                              `}
                                                        />
                                                    ))}
                                                </div>
                                            )}
                                        </button>
                                    );
                                })
                            }
                        </div>
                    </div>
                </div>

                <!-- Events List Grouped by Date -->
                <div class="space-y-8 pt-4">
                    {
                        Object.entries(getAllEventsGroupedByDate())
                            .sort(([dateA], [dateB]) => dateA.localeCompare(dateB))
                            .map(([dateStr, dateEvents]) => {
                                const date = new Date(dateStr);
                                const isToday = isDateToday(date);

                                return (
                                    <div
                                        data-event-date={dateStr}
                                        class={`rounded-2xl transition-all duration-300 p-5
                      ${isToday ? 'bg-purple-50/50 ring-1 ring-purple-100' : 'hover:bg-gray-50/50'}`}
                                    >
                                        <div class="flex items-center gap-3 mb-5">
                                            <div
                                                class={`px-4 py-2 rounded-xl text-sm font-medium
                          ${
                              isToday
                                  ? 'bg-white text-purple-700 shadow-sm ring-1 ring-purple-100'
                                  : 'bg-gray-100 text-gray-600'
                          }`}
                                            >
                                                {format(date, 'MMM d, EEE')}
                                            </div>
                                        </div>

                                        <div class="space-y-4">
                                            {dateEvents.map((event) => {
                                                const eventTime = formatInTimeZone(
                                                    new Date(event.start_time!),
                                                    'Asia/Manila',
                                                    'h:mm a',
                                                );

                                                return (
                                                    <a
                                                        href={`/events/${event.id}`}
                                                        class={`block bg-white rounded-xl transition-all duration-200
                              ${
                                  isToday
                                      ? 'shadow-sm hover:shadow-md ring-1 ring-purple-100'
                                      : 'shadow-sm hover:shadow-md hover:scale-[1.01]'
                              }
                              ${!isToday && 'hover:bg-gray-50/50'}
                            `}
                                                    >
                                                        <div class="p-5">
                                                            <div class="flex gap-4">
                                                                {event?.cover_photo && (
                                                                    <div class="w-20 h-20 rounded-lg overflow-hidden flex-shrink-0 bg-gray-100">
                                                                        <Image
                                                                            src={event.cover_photo}
                                                                            alt={event.name}
                                                                            width={80}
                                                                            height={80}
                                                                            class="w-full h-full object-cover"
                                                                        />
                                                                    </div>
                                                                )}
                                                                <div class="flex-1 min-w-0">
                                                                    <div class="flex flex-col h-full justify-between gap-3">
                                                                        <div>
                                                                            <h3
                                                                                class={`font-semibold leading-snug text-base
                                        ${isToday ? 'text-purple-900' : 'text-gray-900'}`}
                                                                            >
                                                                                {event.name}
                                                                            </h3>
                                                                            {event.description && (
                                                                                <p class="text-sm text-gray-500 line-clamp-2 mt-1">
                                                                                    {event.description}
                                                                                </p>
                                                                            )}
                                                                        </div>
                                                                        <div class="flex items-center gap-3 text-sm">
                                                                            <div
                                                                                class={`flex items-center gap-1.5
                                        ${isToday ? 'text-purple-600' : 'text-gray-500'}`}
                                                                            >
                                                                                <svg
                                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                                    class="h-4 w-4"
                                                                                    viewBox="0 0 20 20"
                                                                                    fill="currentColor"
                                                                                >
                                                                                    <path
                                                                                        fill-rule="evenodd"
                                                                                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                                                                                        clip-rule="evenodd"
                                                                                    />
                                                                                </svg>
                                                                                <span class="font-medium">
                                                                                    {eventTime}
                                                                                </span>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </a>
                                                );
                                            })}
                                        </div>
                                    </div>
                                );
                            })
                    }
                </div>
            </div>
        </div>
    </main>

    <Navigation />
</Layout>

<script>
    import { format } from 'date-fns';

    document.getElementById('downloadBtn')?.addEventListener('click', async () => {
        const calendar = document.getElementById('calendar-container');
        if (!calendar) return;

        // Show loading state
        const button = document.getElementById('downloadBtn') as HTMLButtonElement;
        if (button) {
            button.disabled = true;
            button.innerHTML = `
            <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Generating...
          `;
        }

        try {
            const { default: html2canvas } = await import('html2canvas');

            const options = {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                logging: false,
            };

            const canvas = await html2canvas(calendar, options);
            const image = canvas.toDataURL('image/png', 1.0);

            const link = document.createElement('a');
            link.download = `tech-events-calendar-${format(new Date(), 'yyyy-MM')}.png`;
            link.href = image;
            link.click();
        } catch (error) {
            console.error('Error generating calendar image:', error instanceof Error ? error.message : 'Unknown error');
        } finally {
            if (button) {
                button.disabled = false;
                button.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
              </svg>
              Download Calendar
            `;
            }
        }
    });

    function scrollToDate(dateStr: string) {
        // Remove highlight from any previously highlighted groups
        document.querySelectorAll('[data-event-date]').forEach((el) => {
            el.classList.remove('bg-purple-50/50', 'ring-1', 'ring-purple-100');
        });

        const events = document.querySelectorAll('[data-event-date]');
        const targetEvent = Array.from(events).find((event) => event.getAttribute('data-event-date') === dateStr);

        if (targetEvent) {
            // Calculate the sticky header height plus some padding
            const stickyHeaderHeight = 150;

            // Get the element's position relative to the viewport
            const elementPosition = targetEvent.getBoundingClientRect().top;
            // Get the current scroll position
            const offsetPosition = elementPosition + window.pageYOffset - stickyHeaderHeight;

            // Smooth scroll to the element
            window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth',
            });

            // Add highlight to the selected group
            targetEvent.classList.add('bg-purple-50/50', 'ring-1', 'ring-purple-100');
        }
    }

    document.querySelectorAll('[data-date]').forEach((button) => {
        button.addEventListener('click', (e) => {
            const dateStr = (e.currentTarget as HTMLElement).getAttribute('data-date');
            if (dateStr) {
                scrollToDate(dateStr);
            }
        });
    });

    document.querySelectorAll('[data-nav]').forEach((button) => {
        button.addEventListener('click', (e) => {
            const direction = (e.currentTarget as HTMLElement).getAttribute('data-nav');

            // Get current date from URL or use current browser date
            const urlParams = new URLSearchParams(window.location.search);
            const currentDateStr = urlParams.get('date');
            const currentDate = currentDateStr ? new Date(currentDateStr) : new Date();

            const newDate = new Date(currentDate);
            if (direction === 'prev-month') {
                newDate.setMonth(currentDate.getMonth() - 1);
            } else if (direction === 'next-month') {
                newDate.setMonth(currentDate.getMonth() + 1);
            }

            // Update the URL with the new date
            const newDateStr = format(newDate, 'yyyy-MM-dd');
            window.location.href = `?date=${newDateStr}`;
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const today = new Date();
        const selectedDate = new URLSearchParams(window.location.search).get('date');
        const currentDate = selectedDate ? new Date(selectedDate) : today;

        // Scroll to today's date in the list if we're in the current month
        if (today.getMonth() === currentDate.getMonth() && today.getFullYear() === currentDate.getFullYear()) {
            // First scroll the day picker to today
            const todayButton = document.querySelector('[data-date="' + format(today, 'yyyy-MM-dd') + '"]');
            if (todayButton) {
                setTimeout(() => {
                    todayButton.scrollIntoView({
                        behavior: 'smooth',
                        block: 'nearest',
                        inline: 'center',
                    });
                }, 100);
            }

            // Then scroll the events list to today's events
            const todayStr = format(today, 'yyyy-MM-dd');
            setTimeout(() => {
                scrollToDate(todayStr);
            }, 200); // Slight delay to ensure smooth scrolling
        }
    });

    // Add these variables at the top of your script
    let lastScrollTop = 0;
    let isScrollingUp = false;
    let scrollTimeout: number;

    // Add this function to handle the scroll behavior
    function handleScroll() {
        const dayPicker = document.querySelector('[data-day-picker]');
        if (!dayPicker) return;

        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
        const scrollDifference = currentScroll - lastScrollTop;
        isScrollingUp = scrollDifference < 0;

        // Show the picker if:
        // 1. User has scrolled up by at least 20px (more sensitive), or
        // 2. User is near the top of the page (within 100px)
        if (currentScroll < 100 || (isScrollingUp && Math.abs(scrollDifference) > 20)) {
            dayPicker.classList.remove('-translate-y-full');
            dayPicker.classList.add('translate-y-0');
        }
        // Hide the picker if:
        // 1. User has scrolled down more than 100px from top, and
        // 2. User is actively scrolling down
        else if (currentScroll > 100 && !isScrollingUp) {
            dayPicker.classList.remove('translate-y-0');
            dayPicker.classList.add('-translate-y-full');
        }

        lastScrollTop = currentScroll;
    }

    // Update the throttled scroll function to be more responsive
    function throttledScroll() {
        if (scrollTimeout) {
            window.cancelAnimationFrame(scrollTimeout);
        }

        scrollTimeout = window.requestAnimationFrame(() => {
            handleScroll();
        });
    }

    // Add event listener when the document is loaded
    document.addEventListener('DOMContentLoaded', () => {
        window.addEventListener('scroll', throttledScroll, { passive: true });
    });
</script>

<!-- Add this style to your head section or in a global CSS file -->
<style>
    .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .scrollbar-hide::-webkit-scrollbar {
        display: none;
    }

    /* Add smooth shadow transition */
    [data-day-picker] {
        box-shadow:
            0 4px 6px -1px rgb(0 0 0 / 0.1),
            0 2px 4px -2px rgb(0 0 0 / 0.1);
        transition:
            transform 0.3s ease-in-out,
            box-shadow 0.3s ease-in-out;
    }

    [data-day-picker].-translate-y-full {
        box-shadow: none;
    }

    /* Optional: Add a subtle backdrop blur when the picker is visible */
    [data-day-picker].translate-y-0 {
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
    }
</style>
