---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';

import { ADMIN_PASSWORD } from 'astro:env/server';

// Simple password protection
const authCookie = Astro.cookies.get('admin-auth');
const authHeader = Astro.request.headers.get('authorization');

let isAuthenticated = false;

// Check if already authenticated via cookie
if (authCookie?.value === ADMIN_PASSWORD) {
    isAuthenticated = true;
}

// Check basic auth header
if (!isAuthenticated && authHeader) {
    const credentials = authHeader.split(' ')[1];
    if (credentials) {
        const decoded = atob(credentials);
        const [username, password] = decoded.split(':');
        if (password === ADMIN_PASSWORD) {
            isAuthenticated = true;
            // Set auth cookie for 1 hour
            Astro.cookies.set('admin-auth', ADMIN_PASSWORD, {
                maxAge: 3600,
                httpOnly: true,
                secure: true,
                sameSite: 'strict',
            });
        }
    }
}

// Check URL query parameter (for initial access)
const urlPassword = Astro.url.searchParams.get('auth');
if (!isAuthenticated && urlPassword === ADMIN_PASSWORD) {
    isAuthenticated = true;
    Astro.cookies.set('admin-auth', ADMIN_PASSWORD, {
        maxAge: 3600,
        httpOnly: true,
        secure: true,
        sameSite: 'strict',
    });
}

// Redirect to login if not authenticated
if (!isAuthenticated) {
    return new Response(null, {
        status: 401,
        headers: {
            'WWW-Authenticate': 'Basic realm="Admin Area"',
            'Content-Type': 'text/html',
        },
    });
}

// Get upcoming events
const { data: events } = await supabase
    .from('events')
    .select('id, name, start_time, is_hidden, registration_enabled')
    .gte('start_time', new Date().toISOString())
    .order('start_time', { ascending: true })
    .limit(20);
---

<Layout title="Admin - Manage RSVP Settings">
    <div class="min-h-screen p-8">
        <div class="max-w-6xl mx-auto">
            <h1 class="text-3xl font-bold mb-8">Manage Event RSVP Settings</h1>

            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                <p class="text-sm text-yellow-800">
                    <strong>Note:</strong> This is a temporary admin page for testing RSVP functionality. Toggle RSVP on/off
                    for any event to test the registration flow.
                </p>
            </div>

            <div class="bg-white rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Event Name
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Date
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                RSVP Status
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {
                            events?.map((event) => (
                                <tr data-event-id={event.id}>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div>
                                            <div class="text-sm font-medium text-gray-900">{event.name}</div>
                                            <div class="text-xs text-gray-500">ID: {event.id}</div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {new Date(event.start_time).toLocaleDateString()}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span
                                            class={`rsvp-status inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                                event.is_hidden || event.registration_enabled
                                                    ? 'bg-green-100 text-green-800'
                                                    : 'bg-gray-100 text-gray-800'
                                            }`}
                                        >
                                            {event.is_hidden || event.registration_enabled ? 'Enabled' : 'Disabled'}
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        <button
                                            class="toggle-rsvp px-3 py-1 bg-purple-600 text-white rounded hover:bg-purple-700 mr-2"
                                            data-event-id={event.id}
                                            data-current-status={
                                                event.is_hidden || event.registration_enabled ? 'enabled' : 'disabled'
                                            }
                                        >
                                            {event.is_hidden || event.registration_enabled ? 'Disable' : 'Enable'} RSVP
                                        </button>
                                        <a
                                            href={`/events/${event.id}`}
                                            class="px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700 inline-block"
                                            target="_blank"
                                        >
                                            View Event
                                        </a>
                                    </td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>

            <div class="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h3 class="font-semibold text-blue-900 mb-2">Testing Instructions:</h3>
                <ol class="list-decimal list-inside text-sm text-blue-800 space-y-1">
                    <li>Enable RSVP for an event using the toggle button</li>
                    <li>Click "View Event" to open the event page</li>
                    <li>You should see a "Register Now" button if RSVP is enabled</li>
                    <li>Test both authenticated and non-authenticated RSVP flows</li>
                    <li>Check the database for created registrations in the event_registrations table</li>
                </ol>
            </div>
        </div>
    </div>
</Layout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggleButtons = document.querySelectorAll('.toggle-rsvp');

        toggleButtons.forEach((button) => {
            button.addEventListener('click', async (e) => {
                const btn = e.target as HTMLButtonElement;
                const eventId = btn.dataset.eventId;
                const currentStatus = btn.dataset.currentStatus;
                const enable = currentStatus === 'disabled';

                btn.disabled = true;
                btn.textContent = 'Updating...';

                try {
                    const response = await fetch('/api/test-enable-rsvp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            eventId,
                            enable,
                        }),
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Update UI
                        const row = document.querySelector(`tr[data-event-id="${eventId}"]`);
                        if (row) {
                            const statusSpan = row.querySelector('.rsvp-status');
                            if (statusSpan) {
                                if (enable) {
                                    statusSpan.className =
                                        'rsvp-status inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800';
                                    statusSpan.textContent = 'Enabled';
                                } else {
                                    statusSpan.className =
                                        'rsvp-status inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800';
                                    statusSpan.textContent = 'Disabled';
                                }
                            }
                        }

                        // Update button
                        btn.dataset.currentStatus = enable ? 'enabled' : 'disabled';
                        btn.textContent = enable ? 'Disable RSVP' : 'Enable RSVP';

                        // Show success message
                        console.log(result.message);
                    } else {
                        alert('Failed to update: ' + (result.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error updating RSVP status:', error);
                    alert('Failed to update RSVP status');
                } finally {
                    btn.disabled = false;
                }
            });
        });
    });
</script>
