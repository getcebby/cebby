---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import EventCard from '../components/EventCard.astro';
import { supabase } from '../lib/supabase';
import type { EventFromDB } from '../types/database';
import Header from '../components/Header.astro';
import SEO from '../components/SEO.astro';
import OnlineUsers from '../components/OnlineUsers.astro';
import ContentCard from '../components/ContentCard.astro';

const TIMEZONE = 'Asia/Manila';

// Helper function to get date in Manila timezone
function getDateInTimezone(date: Date): Date {
    return new Date(date.toLocaleString('en-US', { timeZone: TIMEZONE }));
}

// Get current date in Manila timezone
const now = getDateInTimezone(new Date());
const today = new Date(now.setHours(0, 0, 0, 0));
const tomorrow = getDateInTimezone(new Date(today));
tomorrow.setDate(tomorrow.getDate() + 1);

// Get date 30 days ago
const thirtyDaysAgo = getDateInTimezone(new Date(today));
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

// Calculate next month in Manila timezone
const nextMonth = getDateInTimezone(new Date(today));
nextMonth.setDate(1); // Set to first day of current month first
nextMonth.setMonth(nextMonth.getMonth() + 1); // Then move to next month
nextMonth.setHours(0, 0, 0, 0);

// Add these helper functions near the top of the file, after imports
function getStartOfWeek(date: Date): Date {
    const d = getDateInTimezone(new Date(date));
    const day = d.getDay();
    const diff = day === 0 ? -6 : 1 - day;
    d.setDate(d.getDate() + diff);
    d.setHours(0, 0, 0, 0);
    return d;
}

function getEndOfWeek(date: Date): Date {
    const d = getStartOfWeek(date);
    d.setDate(d.getDate() + 6);
    d.setHours(23, 59, 59, 999);
    return d;
}

// Add helper function to get start and end of next week
function getStartOfNextWeek(date: Date): Date {
    const startOfWeek = getStartOfWeek(date);
    const startOfNextWeek = getDateInTimezone(new Date(startOfWeek));
    startOfNextWeek.setDate(startOfNextWeek.getDate() + 7);
    startOfNextWeek.setHours(0, 0, 0, 0);
    return startOfNextWeek;
}

function getEndOfNextWeek(date: Date): Date {
    const startOfNextWeek = getStartOfNextWeek(date);
    const endOfNextWeek = getDateInTimezone(new Date(startOfNextWeek));
    endOfNextWeek.setDate(endOfNextWeek.getDate() + 6);
    endOfNextWeek.setHours(23, 59, 59, 999);
    return endOfNextWeek;
}

// Add helper functions to get start and end of current month
function getStartOfMonth(date: Date): Date {
    const d = getDateInTimezone(new Date(date));
    d.setDate(1);
    d.setHours(0, 0, 0, 0);
    return d;
}

function getEndOfMonth(date: Date): Date {
    const d = getDateInTimezone(new Date(date));
    d.setMonth(d.getMonth() + 1);
    d.setDate(0);
    d.setHours(23, 59, 59, 999);
    return d;
}

// Fetch events from Supabase with optimized query
const { data: allEvents, error } = (await supabase
    .from('events')
    .select('*')
    .filter('is_hidden', 'not.is', 'true')
    .gte('start_time', thirtyDaysAgo.toISOString())
    .order('start_time', { ascending: false })) as {
    data: EventFromDB[] | null;
    error: any;
};

// Remove duplicates based on event name
const uniqueEvents = allEvents?.reduce((unique: EventFromDB[], event) => {
    const exists = unique.find((e) => e.name.toLowerCase() === event.name.toLowerCase());
    if (!exists) {
        unique.push(event);
    }
    return unique;
}, []);

// Add this before the events reducer
console.log('Date ranges:', {
    today: today.toLocaleString('en-US', { timeZone: TIMEZONE }),
    startOfWeek: getStartOfWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    endOfWeek: getEndOfWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    startOfNextWeek: getStartOfNextWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    endOfNextWeek: getEndOfNextWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    startOfMonth: getStartOfMonth(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    endOfMonth: getEndOfMonth(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    nextMonth: nextMonth.toLocaleString('en-US', { timeZone: TIMEZONE }),
});

// Update the events reducer logic for thisWeek
const events = uniqueEvents?.reduce(
    (acc, event) => {
        const now = getDateInTimezone(new Date());
        const eventStart = getDateInTimezone(new Date(event.start_time));
        const eventEnd = event.end_time
            ? getDateInTimezone(new Date(event.end_time))
            : getDateInTimezone(new Date(eventStart.getTime() + 4 * 60 * 60 * 1000));

        if (eventStart <= now && now <= eventEnd) {
            acc.happening.push(event);
            return acc;
        }

        if (eventStart > now) {
            const startOfWeek = getStartOfWeek(today);
            const endOfWeek = getEndOfWeek(today);
            const startOfNextWeek = getStartOfNextWeek(today);
            const endOfNextWeek = getEndOfNextWeek(today);
            const startOfMonth = getStartOfMonth(today);
            const endOfMonth = getEndOfMonth(today);

            // Calculate next month in Manila timezone - FIXED VERSION
            const nextMonth = getDateInTimezone(new Date(today));
            nextMonth.setDate(1); // Set to first day of current month first
            nextMonth.setMonth(nextMonth.getMonth() + 1); // Then move to next month
            nextMonth.setHours(0, 0, 0, 0);

            if (eventStart.toDateString() === today.toDateString()) {
                acc.today.push(event);
            } else if (eventStart.toDateString() === tomorrow.toDateString()) {
                acc.tomorrow.push(event);
            } else if (eventStart >= startOfWeek && eventStart <= endOfWeek) {
                acc.thisWeek.push(event);
            } else if (eventStart >= startOfNextWeek && eventStart <= endOfNextWeek) {
                acc.nextWeek.push(event);
            } else if (eventStart >= startOfMonth && eventStart <= endOfMonth) {
                acc.thisMonth.push(event);
            } else if (eventStart >= nextMonth) {
                acc.nextMonth.push(event);
            } else {
                acc.later.push(event);
            }
        } else if (eventStart >= thirtyDaysAgo) {
            acc.recent.push(event);
        } else {
            acc.past.push(event);
        }
        return acc;
    },
    {
        happening: [] as EventFromDB[],
        today: [] as EventFromDB[],
        tomorrow: [] as EventFromDB[],
        thisWeek: [] as EventFromDB[],
        nextWeek: [] as EventFromDB[],
        thisMonth: [] as EventFromDB[],
        nextMonth: [] as EventFromDB[],
        later: [] as EventFromDB[],
        recent: [] as EventFromDB[],
        past: [] as EventFromDB[],
    }
);

// Destructure events with default empty arrays
const {
    happening: happeningEvents = [],
    today: todayEvents = [],
    tomorrow: tomorrowEvents = [],
    thisWeek: thisWeekEvents = [],
    nextWeek: nextWeekEvents = [],
    thisMonth: thisMonthEvents = [],
    nextMonth: nextMonthEvents = [],
    later: laterEvents = [],
    recent: recentEvents = [],
    past: pastEvents = [],
} = events ?? {};

// Sort happening now events by start time (most recent first)
events?.happening.sort((a: EventFromDB, b: EventFromDB) => {
    const now = new Date();
    const aStart = new Date(a.start_time);
    const bStart = new Date(b.start_time);

    // Check if events started today
    const aStartedToday = aStart.toDateString() === now.toDateString();
    const bStartedToday = bStart.toDateString() === now.toDateString();

    // If one event started today and the other didn't, prioritize today's event
    if (aStartedToday && !bStartedToday) return -1;
    if (!aStartedToday && bStartedToday) return 1;

    // If both started today or both started before today, sort by start time
    return new Date(b.start_time).getTime() - new Date(a.start_time).getTime();
});

// Sort each category by start time
events?.today.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);
events?.tomorrow.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);
events?.thisWeek.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);
events?.nextWeek.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);
events?.thisMonth.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);
events?.nextMonth.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);
events?.later.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
);

// Sort recent events by most recent first
events?.recent.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(b.start_time).getTime() - new Date(a.start_time).getTime()
);

// Sort past events by most recent first
const PAST_EVENTS_LIMIT = 9;

events?.past
    ?.sort((a: EventFromDB, b: EventFromDB) => new Date(b.start_time).getTime() - new Date(a.start_time).getTime())
    .slice(0, PAST_EVENTS_LIMIT);

if (error) {
    console.error('Error fetching events:', error);
}

// Get all upcoming events for meta info and JSON-LD
const allUpcomingEvents = [
    ...(events?.today || []),
    ...(events?.tomorrow || []),
    ...(events?.thisWeek || []),
    ...(events?.thisMonth || []),
    ...(events?.nextMonth || []),
    ...(events?.later || []),
];

// Create JSON-LD for the home page
const homeJsonLd = {
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    name: 'Discover all tech events in Cebu in one place - cebby',
    description: 'Discover the latest tech events, conferences, workshops, and meetups happening in Cebu.',
    publisher: {
        '@type': 'Organization',
        name: 'Cebby',
        logo: {
            '@type': 'ImageObject',
            url: new URL('/icons/icon-512x512.png', Astro.url),
        },
    },
    mainEntity: {
        '@type': 'ItemList',
        itemListElement: allUpcomingEvents.slice(0, 3).map((event: EventFromDB, index: number) => ({
            '@type': 'ListItem',
            position: index + 1,
            item: {
                '@type': 'Event',
                name: event.name,
                startDate: event.start_time,
                location: {
                    '@type': 'Place',
                    name: event.location,
                },
                url: new URL(`/events/${event.id}`, Astro.url),
            },
        })),
    },
};

// Calculate some metrics for meta description
const upcomingCount = allUpcomingEvents.length;
const totalEvents = uniqueEvents?.length || 0;
const metaDescription = `Discover ${upcomingCount} upcoming and ${totalEvents} total tech events in Cebu. Find workshops, conferences, meetups, and more tech-related events.`;

// Sample events data
const sampleEvents = [
    {
        id: 1,
        title: 'Cebu International Film Festival',
        description:
            'A celebration of local and international cinema featuring screenings, workshops, and panel discussions with renowned filmmakers.',
        image: '/images/events/film-festival.jpg',
        category: 'Arts',
        date: '2024-05-15T18:00:00',
        venue: 'SM Seaside City Cebu',
        author: { name: 'Cebu Film Commission', avatar: '/images/avatars/default.jpg' },
        likes: 342,
        views: 1205,
        isNew: true,
    },
    {
        id: 2,
        title: 'Sinulog Festival 2024',
        description:
            "Experience Cebu's most famous cultural and religious festival with colorful parades, traditional dances, and music.",
        image: '/images/events/sinulog.jpg',
        category: 'Culture',
        date: '2024-01-21T08:00:00',
        venue: 'Cebu City Streets',
        author: { name: 'Cebu City Government', avatar: '/images/avatars/default.jpg' },
        likes: 892,
        views: 5430,
        isFeatured: true,
    },
    {
        id: 3,
        title: 'Cebu Tech Summit',
        description: "Connect with tech leaders, startups, and innovators at Cebu's premier technology conference.",
        image: '/images/events/tech-summit.jpg',
        category: 'Tech',
        date: '2024-06-10T09:00:00',
        venue: 'Waterfront Cebu City Hotel',
        author: { name: 'Cebu Innovation Hub', avatar: '/images/avatars/default.jpg' },
        likes: 256,
        views: 980,
        isNew: true,
    },
    {
        id: 4,
        title: 'Cebu Food Festival',
        description:
            'Taste the best of Cebuano cuisine with food stalls, cooking demonstrations, and culinary competitions.',
        image: '/images/events/food-festival.jpg',
        category: 'Food',
        date: '2024-04-05T10:00:00',
        venue: 'Ayala Center Cebu',
        author: { name: 'Cebu Food Association', avatar: '/images/avatars/default.jpg' },
        likes: 421,
        views: 1876,
        isFeatured: true,
    },
    {
        id: 5,
        title: 'Bisrock Music Festival',
        description: 'A night of Bisaya rock music featuring top local bands and emerging artists.',
        image: '/images/events/music-festival.jpg',
        category: 'Music',
        date: '2024-05-28T19:00:00',
        venue: 'SRP Grounds',
        author: { name: 'Cebu Music Association', avatar: '/images/avatars/default.jpg' },
        likes: 310,
        views: 1450,
        isNew: true,
    },
    {
        id: 6,
        title: 'Cebu Marathon 2024',
        description: 'Join runners from around the world in this scenic race through the streets of Cebu.',
        image: '/images/events/marathon.jpg',
        category: 'Fitness',
        date: '2024-01-14T04:00:00',
        venue: 'Cebu Business Park',
        author: { name: 'Cebu Executive Runners Club', avatar: '/images/avatars/default.jpg' },
        likes: 287,
        views: 1320,
        isFeatured: true,
    },
    {
        id: 7,
        title: 'Startup Weekend Cebu',
        description:
            '54-hour event where aspiring entrepreneurs can experience startup life and launch their business ideas.',
        image: '/images/events/startup-weekend.jpg',
        category: 'Business',
        date: '2024-07-12T17:00:00',
        venue: 'The Company Cebu',
        author: { name: 'Techstars', avatar: '/images/avatars/default.jpg' },
        likes: 198,
        views: 876,
        isNew: true,
    },
    {
        id: 8,
        title: 'Cebu Arts & Crafts Fair',
        description: 'Showcase of local artisans featuring handmade crafts, art pieces, and workshops.',
        image: '/images/events/arts-crafts.jpg',
        category: 'Arts',
        date: '2024-03-18T10:00:00',
        venue: 'Robinsons Galleria Cebu',
        author: { name: 'Cebu Creative Council', avatar: '/images/avatars/default.jpg' },
        likes: 245,
        views: 1120,
        isFeatured: true,
    },
    {
        id: 9,
        title: 'Cebu Yoga Festival',
        description: 'A weekend of yoga classes, meditation sessions, and wellness workshops for all levels.',
        image: '/images/events/yoga-festival.jpg',
        category: 'Fitness',
        date: '2024-06-22T07:00:00',
        venue: 'Tops Lookout',
        author: { name: 'Cebu Yoga Community', avatar: '/images/avatars/default.jpg' },
        likes: 176,
        views: 890,
        isNew: true,
    },
    {
        id: 10,
        title: 'Cebu Business Conference',
        description: 'Annual gathering of business leaders discussing economic trends and opportunities in Cebu.',
        image: '/images/events/business-conference.jpg',
        category: 'Business',
        date: '2024-09-05T08:30:00',
        venue: 'Marco Polo Plaza Cebu',
        author: { name: 'Cebu Chamber of Commerce', avatar: '/images/avatars/default.jpg' },
        likes: 230,
        views: 1050,
        isFeatured: true,
    },
    {
        id: 11,
        title: 'Gabii sa Kabilin (Night of Heritage)',
        description:
            "Experience Cebu's rich cultural heritage through this night-time cultural event featuring museums and historical sites.",
        image: '/images/events/heritage-night.jpg',
        category: 'Culture',
        date: '2024-05-31T18:00:00',
        venue: 'Various locations in Cebu City',
        author: { name: 'Ramon Aboitiz Foundation', avatar: '/images/avatars/default.jpg' },
        likes: 267,
        views: 1230,
        isNew: true,
    },
    {
        id: 12,
        title: 'Cebu Design Week',
        description: 'Celebration of Cebuano creativity and innovation in design, fashion, architecture, and more.',
        image: '/images/events/design-week.jpg',
        category: 'Arts',
        date: '2024-10-12T10:00:00',
        venue: 'Oakridge Business Park',
        author: { name: 'Creative Cebu Council', avatar: '/images/avatars/default.jpg' },
        likes: 215,
        views: 980,
        isFeatured: true,
    },
];

// Categories for filtering
const categories = [
    { id: 'all', name: 'All Categories' },
    { id: 'tech', name: 'Tech' },
    { id: 'arts', name: 'Arts' },
    { id: 'fitness', name: 'Fitness' },
    { id: 'music', name: 'Music' },
    { id: 'food', name: 'Food' },
    { id: 'business', name: 'Business' },
    { id: 'culture', name: 'Culture' },
    { id: 'education', name: 'Education' },
    { id: 'community', name: 'Community' },
];

// Time filters
const timeFilters = [
    { id: 'all', name: 'Any Time' },
    { id: 'today', name: 'Today' },
    { id: 'tomorrow', name: 'Tomorrow' },
    { id: 'this-week', name: 'This Week' },
    { id: 'this-weekend', name: 'This Weekend' },
    { id: 'next-week', name: 'Next Week' },
    { id: 'this-month', name: 'This Month' },
    { id: 'next-month', name: 'Next Month' },
];

// Format date for display
function formatDate(dateString: string): string {
    const options: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('en-US', options);
}

// Format time for display
function formatTime(dateString: string): string {
    const options: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric', hour12: true };
    return new Date(dateString).toLocaleTimeString('en-US', options);
}
---

<Layout title="All Events - Cebby">
    <Fragment slot="head">
        <SEO
            title="All Events - Cebby"
            description="Discover all events happening in Cebu - from tech conferences to cultural festivals, music concerts to food fairs."
            type="website"
        />
    </Fragment>

    <main class="min-h-screen">
        <!-- Hero Section -->
        <div class="bg-gradient-to-r from-gray-900 to-gray-800 py-16">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="text-center">
                    <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">All Events</h1>
                    <p class="text-xl text-white/80 max-w-3xl mx-auto">Discover the best events happening in Cebu</p>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="bg-white border-b">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
                    <!-- Category Filter -->
                    <div class="flex items-center space-x-2">
                        <label for="category-filter" class="text-sm font-medium text-gray-700">Category:</label>
                        <select
                            id="category-filter"
                            class="rounded-md border-gray-300 py-2 pl-3 pr-10 text-sm focus:border-cebby-primary focus:outline-none focus:ring-cebby-primary"
                        >
                            {categories.map((category) => <option value={category.id}>{category.name}</option>)}
                        </select>
                    </div>

                    <!-- Time Filter -->
                    <div class="flex items-center space-x-2">
                        <label for="time-filter" class="text-sm font-medium text-gray-700">When:</label>
                        <select
                            id="time-filter"
                            class="rounded-md border-gray-300 py-2 pl-3 pr-10 text-sm focus:border-cebby-primary focus:outline-none focus:ring-cebby-primary"
                        >
                            {timeFilters.map((filter) => <option value={filter.id}>{filter.name}</option>)}
                        </select>
                    </div>

                    <!-- Sort Options -->
                    <div class="flex items-center space-x-2">
                        <label for="sort-options" class="text-sm font-medium text-gray-700">Sort by:</label>
                        <select
                            id="sort-options"
                            class="rounded-md border-gray-300 py-2 pl-3 pr-10 text-sm focus:border-cebby-primary focus:outline-none focus:ring-cebby-primary"
                        >
                            <option value="date-asc">Date (Soonest)</option>
                            <option value="date-desc">Date (Latest)</option>
                            <option value="popularity">Popularity</option>
                            <option value="newest">Recently Added</option>
                        </select>
                    </div>

                    <!-- Search -->
                    <div class="relative flex-grow max-w-md">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                        <input
                            type="text"
                            placeholder="Search events..."
                            class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:border-cebby-primary focus:ring-cebby-primary sm:text-sm"
                        />
                    </div>
                </div>

                <!-- Active Filters -->
                <div class="mt-4 flex flex-wrap items-center gap-2">
                    <span class="text-sm font-medium text-gray-700">Active filters:</span>
                    <span
                        class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-cebby-primary/10 text-cebby-primary"
                    >
                        All Categories
                        <button
                            type="button"
                            class="ml-1 inline-flex flex-shrink-0 h-4 w-4 items-center justify-center rounded-full text-cebby-primary hover:bg-cebby-primary/20 hover:text-cebby-primary-dark focus:outline-none focus:bg-cebby-primary/20 focus:text-cebby-primary-dark"
                        >
                            <span class="sr-only">Remove filter</span>
                            <i class="fas fa-times text-xs"></i>
                        </button>
                    </span>
                    <span
                        class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-cebby-primary/10 text-cebby-primary"
                    >
                        Any Time
                        <button
                            type="button"
                            class="ml-1 inline-flex flex-shrink-0 h-4 w-4 items-center justify-center rounded-full text-cebby-primary hover:bg-cebby-primary/20 hover:text-cebby-primary-dark focus:outline-none focus:bg-cebby-primary/20 focus:text-cebby-primary-dark"
                        >
                            <span class="sr-only">Remove filter</span>
                            <i class="fas fa-times text-xs"></i>
                        </button>
                    </span>
                    <button type="button" class="text-sm text-cebby-primary hover:text-cebby-primary-dark font-medium">
                        Clear all filters
                    </button>
                </div>
            </div>
        </div>

        <!-- Events Grid -->
        <div class="bg-gray-50 py-12">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="mb-8">
                    <h2 class="text-2xl font-bold text-gray-900">Found {sampleEvents.length} events</h2>
                </div>

                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {
                        sampleEvents.map((event) => (
                            <ContentCard
                                title={event.title}
                                description={event.description}
                                image={event.image}
                                category={event.category}
                                date={event.date}
                                venue={event.venue}
                                author={event.author}
                                likes={event.likes}
                                views={event.views}
                            />
                        ))
                    }
                </div>

                <!-- Pagination -->
                <div class="mt-12 flex items-center justify-between">
                    <div class="flex-1 flex justify-between sm:hidden">
                        <a
                            href="#"
                            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                        >
                            Previous
                        </a>
                        <a
                            href="#"
                            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                        >
                            Next
                        </a>
                    </div>
                    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-gray-700">
                                Showing <span class="font-medium">1</span> to <span class="font-medium">12</span> of <span
                                    class="font-medium">48</span
                                > results
                            </p>
                        </div>
                        <div>
                            <nav
                                class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                                aria-label="Pagination"
                            >
                                <a
                                    href="#"
                                    class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                                >
                                    <span class="sr-only">Previous</span>
                                    <i class="fas fa-chevron-left text-xs"></i>
                                </a>
                                <a
                                    href="#"
                                    aria-current="page"
                                    class="z-10 bg-cebby-primary border-cebby-primary text-white relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                >
                                    1
                                </a>
                                <a
                                    href="#"
                                    class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                >
                                    2
                                </a>
                                <a
                                    href="#"
                                    class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                >
                                    3
                                </a>
                                <span
                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700"
                                >
                                    ...
                                </span>
                                <a
                                    href="#"
                                    class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                >
                                    8
                                </a>
                                <a
                                    href="#"
                                    class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                                >
                                    <span class="sr-only">Next</span>
                                    <i class="fas fa-chevron-right text-xs"></i>
                                </a>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Newsletter Section -->
        <div class="bg-white py-16">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="bg-cebby-primary/10 rounded-2xl p-8 md:p-12">
                    <div class="max-w-3xl mx-auto text-center">
                        <h2 class="text-3xl font-bold text-gray-900 mb-4">Never Miss an Event</h2>
                        <p class="text-lg text-gray-600 mb-8">
                            Subscribe to our newsletter and get weekly updates on the best events in Cebu.
                        </p>
                        <div class="flex flex-col sm:flex-row gap-4 justify-center">
                            <input
                                type="email"
                                placeholder="Enter your email"
                                class="px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-cebby-primary focus:border-transparent"
                            />
                            <button
                                type="button"
                                class="px-6 py-3 bg-cebby-primary text-white font-medium rounded-md hover:bg-cebby-primary-dark transition-colors"
                            >
                                Subscribe
                            </button>
                        </div>
                        <p class="text-sm text-gray-500 mt-4">We respect your privacy. Unsubscribe at any time.</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <Navigation />
</Layout>

<style>
    /* Mobile scroll styles */
    @media (max-width: 639px) {
        .scroll-container {
            width: 100%;
            overflow: hidden;
            padding: 0.5rem 0 1.5rem;
            margin: -0.5rem 0 -1.5rem;
        }

        .scroll-area {
            display: flex;
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            padding: 0.5rem 1rem;
            margin: 0 -1rem;
            gap: 1rem;
            overscroll-behavior-x: contain;
        }

        .scroll-area::-webkit-scrollbar {
            display: none;
        }

        .scroll-item {
            flex: 0 0 calc(90% - 1rem);
            scroll-snap-align: center;
            scroll-snap-stop: always;
            user-select: none;
            -webkit-user-select: none;
        }

        /* Add this new style for mobile cards */
        .scroll-item > div {
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        .scroll-item > div > a {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        /* Ensure the time filters group scrolls properly on mobile */
        .flex.items-center.gap-2 {
            flex-wrap: nowrap;
            min-width: min-content;
        }
    }

    /* Hide scrollbar but keep functionality */
    .hide-scrollbar {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .hide-scrollbar::-webkit-scrollbar {
        display: none;
    }

    /* Smooth transitions */
    .event-tab [class*='scale-'] {
        transition-property: transform;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
    }

    /* Ensure the All tab stays visible */
    .event-tab[data-tab='all'] {
        position: sticky;
        left: 0;
        z-index: 10;
    }

    /* Add shadow to indicate more content */
    @media (max-width: 639px) {
        .flex.overflow-x-auto::after {
            content: '';
            position: absolute;
            right: 0;
            top: 0;
            bottom: 0;
            width: 24px;
            background: linear-gradient(to right, transparent, white);
            pointer-events: none;
        }
    }
</style>

<script>
    // Function to handle tab navigation
    function initializeTabNavigation() {
        const tabs = document.querySelectorAll('.event-tab');
        const sections = document.querySelectorAll('.upcoming-section');

        // Function to find the first available tab with events
        const findFirstAvailableTab = (): string => {
            const tabOrder = ['all', 'today', 'tomorrow', 'thisWeek', 'nextWeek', 'thisMonth', 'nextMonth', 'later'];

            // Find first tab that exists and has content
            for (const tabId of tabOrder) {
                const section = document.querySelector(`.upcoming-section[data-section="${tabId}"]`);
                if (section) {
                    // Show this section and its tab
                    const tab = document.querySelector(`[data-tab="${tabId}"]`);
                    if (tab) {
                        section.classList.remove('hidden');
                        section.setAttribute('data-active', 'true');
                        tab.setAttribute('data-active', 'true');
                        return tabId;
                    }
                }
            }

            return 'all'; // Fallback to all even if empty
        };

        // Get active tab from URL hash or find first available
        const getActiveTab = (): string => {
            const hash = window.location.hash.slice(1);
            const hashTab = document.querySelector(`[data-tab="${hash}"]`);
            const hashSection = document.querySelector(`.upcoming-section[data-section="${hash}"]`);

            // If hash exists and corresponding tab exists with content, use it
            if (hash && hashTab && hashSection) {
                return hash;
            }

            // Otherwise find first available tab
            return findFirstAvailableTab();
        };

        // Function to update UI based on active tab
        const updateUI = (activeTabId: string) => {
            // Hide all sections first
            sections.forEach((section) => {
                section.classList.add('hidden');
                section.setAttribute('data-active', 'false');
            });

            // Reset all tabs
            tabs.forEach((t) => {
                t.setAttribute('data-active', 'false');
            });

            // Show active section and update tab
            const activeSection = document.querySelector(`.upcoming-section[data-section="${activeTabId}"]`);
            const activeTab = document.querySelector(`[data-tab="${activeTabId}"]`);

            if (activeSection && activeTab) {
                activeSection.classList.remove('hidden');
                activeSection.setAttribute('data-active', 'true');
                activeTab.setAttribute('data-active', 'true');

                // Update URL hash without scrolling
                const newUrl = `${window.location.pathname}#${activeTabId}`;
                window.history.replaceState(null, '', newUrl);
            }
        };

        // Set initial state
        const initialTab = getActiveTab();
        updateUI(initialTab);

        // Add click handlers to tabs
        tabs.forEach((tab) => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = tab.getAttribute('data-tab');
                if (tabId) {
                    updateUI(tabId);
                }
            });
        });

        // Handle browser back/forward
        window.addEventListener('hashchange', () => {
            const newTab = getActiveTab();
            updateUI(newTab);
        });
    }

    // Only initialize scrolling on mobile
    function initializeScrolling() {
        if (window.innerWidth >= 640) return;

        const scrollAreas = document.querySelectorAll('.scroll-area');

        scrollAreas.forEach((scrollArea) => {
            let isDown = false;
            let startX: number;
            let scrollLeft: number;

            const onMouseDown = (e: MouseEvent) => {
                isDown = true;
                (scrollArea as HTMLElement).classList.add('active');
                startX = e.pageX - (scrollArea as HTMLElement).offsetLeft;
                scrollLeft = (scrollArea as HTMLElement).scrollLeft;
            };

            const onMouseLeave = () => {
                isDown = false;
                (scrollArea as HTMLElement).classList.remove('active');
            };

            const onMouseUp = () => {
                isDown = false;
                (scrollArea as HTMLElement).classList.remove('active');
            };

            const onMouseMove = (e: MouseEvent) => {
                if (!isDown) return;
                e.preventDefault();
                const x = e.pageX - (scrollArea as HTMLElement).offsetLeft;
                const walk = (x - startX) * 2;
                (scrollArea as HTMLElement).scrollLeft = scrollLeft - walk;
            };

            (scrollArea as HTMLElement).addEventListener('mousedown', onMouseDown as EventListener);
            (scrollArea as HTMLElement).addEventListener('mouseleave', onMouseLeave as EventListener);
            (scrollArea as HTMLElement).addEventListener('mouseup', onMouseUp as EventListener);
            (scrollArea as HTMLElement).addEventListener('mousemove', onMouseMove as EventListener);
        });
    }

    // Helper function to get date in Manila timezone
    function getDateInTimezone(date: string | Date) {
        return new Date(date.toLocaleString('en-US', { timeZone: 'Asia/Manila' }));
    }

    // Function to check if an event is happening now
    function isEventHappening(event: any) {
        const now = getDateInTimezone(new Date());
        const eventStart = getDateInTimezone(new Date(event.start_time));
        const eventEnd = event.end_time
            ? getDateInTimezone(new Date(event.end_time))
            : new Date(eventStart.getTime() + 4 * 60 * 60 * 1000);

        return eventStart <= now && now <= eventEnd;
    }

    // Function to update event sections
    function updateEventSections() {
        const happening = document.querySelector('[data-section="happening"]') as HTMLDivElement;
        const upcoming = document.querySelector('[data-section="upcoming"]') as HTMLDivElement;

        if (!happening || !upcoming) return;

        const upcomingCards = upcoming.querySelectorAll('[data-event]');

        upcomingCards.forEach((card) => {
            const eventData = JSON.parse(card.getAttribute('data-event') || '{}');

            if (isEventHappening(eventData)) {
                // Move card to happening section
                const happeningGrid = happening.querySelector('.grid, .scroll-area');
                if (happeningGrid) {
                    happening.style.display = 'block';
                    const wrapper = card.closest('.scroll-item') || card;
                    happeningGrid.appendChild(wrapper);
                }
            }
        });

        // Hide sections if empty
        ['happening', 'upcoming'].forEach((section) => {
            const sectionEl = document.querySelector(`[data-section="${section}"]`) as HTMLDivElement;
            const grid = sectionEl?.querySelector('.grid, .scroll-area');
            if (sectionEl && grid) {
                const hasEvents = grid.children.length > 0;
                sectionEl.style.display = hasEvents ? 'block' : 'none';
            }
        });
    }

    // Function to equalize card heights in scroll views
    function equalizeCardHeights() {
        if (window.innerWidth >= 640) return; // Only for mobile

        const scrollAreas = document.querySelectorAll('.scroll-area');
        scrollAreas.forEach((scrollArea) => {
            const cards = scrollArea.querySelectorAll('.event-card');
            if (!cards.length) return;

            // Reset heights first
            cards.forEach((card) => {
                (card as HTMLElement).style.height = 'auto';
            });

            // Find the tallest card
            let maxHeight = 0;
            cards.forEach((card) => {
                const height = (card as HTMLElement).offsetHeight;
                maxHeight = Math.max(maxHeight, height);
            });

            // Set all cards to the tallest height
            if (maxHeight > 0) {
                cards.forEach((card) => {
                    (card as HTMLElement).style.height = `${maxHeight}px`;
                });
            }
        });
    }

    // Function to initialize all features
    function initialize() {
        initializeTabNavigation();
        initializeScrolling();
        updateEventSections();
        equalizeCardHeights();

        // Re-run equalize when images load
        const images = document.querySelectorAll('img');
        images.forEach((img) => {
            img.addEventListener('load', equalizeCardHeights);
        });
    }

    // Run on initial page load
    initialize();

    // Run after each navigation
    document.addEventListener('astro:page-load', initialize);

    // Re-run on window resize
    let resizeTimer: any;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(equalizeCardHeights, 250);
    });

    // Re-run when tab changes
    const tabs = document.querySelectorAll('.event-tab');
    tabs.forEach((tab) => {
        tab.addEventListener('click', () => {
            setTimeout(equalizeCardHeights, 100);
        });
    });
</script>
