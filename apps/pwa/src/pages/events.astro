---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import EventCard from '../components/EventCard.astro';
import { supabase } from '../lib/supabase';
import type { EventFromDB } from '../types/database';
import Header from '../components/Header.astro';
import SEO from '../components/SEO.astro';
import OnlineUsers from '../components/OnlineUsers.astro';

const TIMEZONE = 'Asia/Manila';

// Helper function to get date in Manila timezone
function getDateInTimezone(date: Date): Date {
    return new Date(date.toLocaleString('en-US', { timeZone: TIMEZONE }));
}

// Get current date in Manila timezone
const now = getDateInTimezone(new Date());
const today = new Date(now.setHours(0, 0, 0, 0));
const tomorrow = getDateInTimezone(new Date(today));
tomorrow.setDate(tomorrow.getDate() + 1);

// Get date 30 days ago
const thirtyDaysAgo = getDateInTimezone(new Date(today));
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

// Calculate next month in Manila timezone
const nextMonth = getDateInTimezone(new Date(today));
nextMonth.setDate(1); // Set to first day of current month first
nextMonth.setMonth(nextMonth.getMonth() + 1); // Then move to next month
nextMonth.setHours(0, 0, 0, 0);

// Add these helper functions near the top of the file, after imports
function getStartOfWeek(date: Date): Date {
    const d = getDateInTimezone(new Date(date));
    const day = d.getDay();
    const diff = day === 0 ? -6 : 1 - day;
    d.setDate(d.getDate() + diff);
    d.setHours(0, 0, 0, 0);
    return d;
}

function getEndOfWeek(date: Date): Date {
    const d = getStartOfWeek(date);
    d.setDate(d.getDate() + 6);
    d.setHours(23, 59, 59, 999);
    return d;
}

// Add helper function to get start and end of next week
function getStartOfNextWeek(date: Date): Date {
    const startOfWeek = getStartOfWeek(date);
    const startOfNextWeek = getDateInTimezone(new Date(startOfWeek));
    startOfNextWeek.setDate(startOfNextWeek.getDate() + 7);
    startOfNextWeek.setHours(0, 0, 0, 0);
    return startOfNextWeek;
}

function getEndOfNextWeek(date: Date): Date {
    const startOfNextWeek = getStartOfNextWeek(date);
    const endOfNextWeek = getDateInTimezone(new Date(startOfNextWeek));
    endOfNextWeek.setDate(endOfNextWeek.getDate() + 6);
    endOfNextWeek.setHours(23, 59, 59, 999);
    return endOfNextWeek;
}

// Add helper functions to get start and end of current month
function getStartOfMonth(date: Date): Date {
    const d = getDateInTimezone(new Date(date));
    d.setDate(1);
    d.setHours(0, 0, 0, 0);
    return d;
}

function getEndOfMonth(date: Date): Date {
    const d = getDateInTimezone(new Date(date));
    d.setMonth(d.getMonth() + 1);
    d.setDate(0);
    d.setHours(23, 59, 59, 999);
    return d;
}

// Fetch events from Supabase with optimized query
const { data: allEvents, error } = (await supabase
    .from('events')
    .select('*')
    .filter('is_hidden', 'not.is', 'true')
    .gte('start_time', thirtyDaysAgo.toISOString())
    .order('start_time', { ascending: false })) as {
    data: EventFromDB[] | null;
    error: any;
};

// Remove duplicates based on event name
const uniqueEvents = allEvents?.reduce((unique: EventFromDB[], event) => {
    const exists = unique.find((e) => e.name.toLowerCase() === event.name.toLowerCase());
    if (!exists) {
        unique.push(event);
    }
    return unique;
}, []);

// Add this before the events reducer
console.log('Date ranges:', {
    today: today.toLocaleString('en-US', { timeZone: TIMEZONE }),
    startOfWeek: getStartOfWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    endOfWeek: getEndOfWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    startOfNextWeek: getStartOfNextWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    endOfNextWeek: getEndOfNextWeek(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    startOfMonth: getStartOfMonth(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    endOfMonth: getEndOfMonth(today).toLocaleString('en-US', {
        timeZone: TIMEZONE,
    }),
    nextMonth: nextMonth.toLocaleString('en-US', { timeZone: TIMEZONE }),
});

// Update the events reducer logic for thisWeek
const events = uniqueEvents?.reduce(
    (acc, event) => {
        const now = getDateInTimezone(new Date());
        const eventStart = getDateInTimezone(new Date(event.start_time));
        const eventEnd = event.end_time
            ? getDateInTimezone(new Date(event.end_time))
            : getDateInTimezone(new Date(eventStart.getTime() + 4 * 60 * 60 * 1000));

        if (eventStart <= now && now <= eventEnd) {
            acc.happening.push(event);
            return acc;
        }

        if (eventStart > now) {
            const startOfWeek = getStartOfWeek(today);
            const endOfWeek = getEndOfWeek(today);
            const startOfNextWeek = getStartOfNextWeek(today);
            const endOfNextWeek = getEndOfNextWeek(today);
            const startOfMonth = getStartOfMonth(today);
            const endOfMonth = getEndOfMonth(today);

            // Calculate next month in Manila timezone - FIXED VERSION
            const nextMonth = getDateInTimezone(new Date(today));
            nextMonth.setDate(1); // Set to first day of current month first
            nextMonth.setMonth(nextMonth.getMonth() + 1); // Then move to next month
            nextMonth.setHours(0, 0, 0, 0);

            if (eventStart.toDateString() === today.toDateString()) {
                acc.today.push(event);
            } else if (eventStart.toDateString() === tomorrow.toDateString()) {
                acc.tomorrow.push(event);
            } else if (eventStart >= startOfWeek && eventStart <= endOfWeek) {
                acc.thisWeek.push(event);
            } else if (eventStart >= startOfNextWeek && eventStart <= endOfNextWeek) {
                acc.nextWeek.push(event);
            } else if (eventStart >= startOfMonth && eventStart <= endOfMonth) {
                acc.thisMonth.push(event);
            } else if (eventStart >= nextMonth) {
                acc.nextMonth.push(event);
            } else {
                acc.later.push(event);
            }
        } else if (eventStart >= thirtyDaysAgo) {
            acc.recent.push(event);
        } else {
            acc.past.push(event);
        }
        return acc;
    },
    {
        happening: [] as EventFromDB[],
        today: [] as EventFromDB[],
        tomorrow: [] as EventFromDB[],
        thisWeek: [] as EventFromDB[],
        nextWeek: [] as EventFromDB[],
        thisMonth: [] as EventFromDB[],
        nextMonth: [] as EventFromDB[],
        later: [] as EventFromDB[],
        recent: [] as EventFromDB[],
        past: [] as EventFromDB[],
    },
);

// Destructure events with default empty arrays
const {
    happening: happeningEvents = [],
    today: todayEvents = [],
    tomorrow: tomorrowEvents = [],
    thisWeek: thisWeekEvents = [],
    nextWeek: nextWeekEvents = [],
    thisMonth: thisMonthEvents = [],
    nextMonth: nextMonthEvents = [],
    later: laterEvents = [],
    recent: recentEvents = [],
    past: pastEvents = [],
} = events ?? {};

// Sort happening now events by start time (most recent first)
events?.happening.sort((a: EventFromDB, b: EventFromDB) => {
    const now = new Date();
    const aStart = new Date(a.start_time);
    const bStart = new Date(b.start_time);

    // Check if events started today
    const aStartedToday = aStart.toDateString() === now.toDateString();
    const bStartedToday = bStart.toDateString() === now.toDateString();

    // If one event started today and the other didn't, prioritize today's event
    if (aStartedToday && !bStartedToday) return -1;
    if (!aStartedToday && bStartedToday) return 1;

    // If both started today or both started before today, sort by start time
    return new Date(b.start_time).getTime() - new Date(a.start_time).getTime();
});

// Sort each category by start time
events?.today.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);
events?.tomorrow.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);
events?.thisWeek.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);
events?.nextWeek.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);
events?.thisMonth.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);
events?.nextMonth.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);
events?.later.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime(),
);

// Sort recent events by most recent first
events?.recent.sort(
    (a: EventFromDB, b: EventFromDB) => new Date(b.start_time).getTime() - new Date(a.start_time).getTime(),
);

// Sort past events by most recent first
const PAST_EVENTS_LIMIT = 9;

events?.past
    ?.sort((a: EventFromDB, b: EventFromDB) => new Date(b.start_time).getTime() - new Date(a.start_time).getTime())
    .slice(0, PAST_EVENTS_LIMIT);

if (error) {
    console.error('Error fetching events:', error);
}

// Get all upcoming events for meta info and JSON-LD
const allUpcomingEvents = [
    ...(events?.today || []),
    ...(events?.tomorrow || []),
    ...(events?.thisWeek || []),
    ...(events?.thisMonth || []),
    ...(events?.nextMonth || []),
    ...(events?.later || []),
];

// Create JSON-LD for the home page
const homeJsonLd = {
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    name: 'Discover all tech events in Cebu in one place - cebby',
    description: 'Discover the latest tech events, conferences, workshops, and meetups happening in Cebu.',
    publisher: {
        '@type': 'Organization',
        name: 'Cebby',
        logo: {
            '@type': 'ImageObject',
            url: new URL('/icons/icon-512x512.png', Astro.url),
        },
    },
    mainEntity: {
        '@type': 'ItemList',
        itemListElement: allUpcomingEvents.slice(0, 3).map((event: EventFromDB, index: number) => ({
            '@type': 'ListItem',
            position: index + 1,
            item: {
                '@type': 'Event',
                name: event.name,
                startDate: event.start_time,
                location: {
                    '@type': 'Place',
                    name: event.location,
                },
                url: new URL(`/events/${event.id}`, Astro.url),
            },
        })),
    },
};

// Calculate some metrics for meta description
const upcomingCount = allUpcomingEvents.length;
const totalEvents = uniqueEvents?.length || 0;
const metaDescription = `Discover ${upcomingCount} upcoming and ${totalEvents} total tech events in Cebu. Find workshops, conferences, meetups, and more tech-related events.`;
---

<Layout title="Discover all tech events in Cebu in one place - cebby">
    <Fragment slot="head">
        <SEO
            title="Discover all tech events in Cebu in one place - cebby"
            description={metaDescription}
            image="/screenshots/image2.png"
            type="website"
        />

        {/* Add JSON-LD Schema markup */}
        <script is:inline type="application/ld+json" set:html={JSON.stringify(homeJsonLd)} />
    </Fragment>

    <Header />

    <main class="min-h-screen pb-16 sm:pb-0 pt-safe">
        <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 px-safe">
            {
                error && (
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6" role="alert">
                        <p class="font-medium">Failed to load events. Please try again later.</p>
                    </div>
                )
            }

            {/* Happening Now Section */}
            {
                happeningEvents.length > 0 && (
                    <div class="mb-12" data-section="happening">
                        <h2 class="text-xl font-semibold text-gray-900 mb-6">Happening Now</h2>
                        {/* Mobile Scroll View */}
                        <div class="sm:hidden scroll-container">
                            <div class="scroll-area">
                                {happeningEvents.map((event: EventFromDB) => (
                                    <div class="scroll-item">
                                        <div data-event={JSON.stringify(event)}>
                                            <EventCard event={event} variant="upcoming" />
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                        {/* Desktop Grid View */}
                        <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                            {happeningEvents.map((event: EventFromDB) => (
                                <div data-event={JSON.stringify(event)}>
                                    <EventCard event={event} variant="upcoming" />
                                </div>
                            ))}
                        </div>
                    </div>
                )
            }

            {/* Upcoming Events Section with Pills */}
            {
                (todayEvents.length > 0 ||
                    tomorrowEvents.length > 0 ||
                    thisWeekEvents.length > 0 ||
                    thisMonthEvents.length > 0 ||
                    nextMonthEvents.length > 0 ||
                    laterEvents.length > 0) && (
                    <div class="mb-12" data-section="upcoming">
                        <div class="flex items-center justify-between gap-2 mb-6">
                            <h2 class="text-xl font-semibold text-gray-900">Upcoming Events</h2>
                            <div>
                                <OnlineUsers />
                            </div>
                        </div>

                        {/* Event Categories Navigation */}
                        <div class="mb-6 px-4 sm:px-0">
                            <div class="relative">
                                <div class="flex overflow-x-auto hide-scrollbar -mx-4 sm:mx-0">
                                    <div class="flex items-center gap-2 pb-4 min-w-full sm:min-w-0">
                                        {/* All Events Tab */}
                                        {(todayEvents.length > 0 ||
                                            tomorrowEvents.length > 0 ||
                                            thisWeekEvents.length > 0 ||
                                            nextWeekEvents.length > 0 ||
                                            thisMonthEvents.length > 0 ||
                                            nextMonthEvents.length > 0 ||
                                            laterEvents.length > 0) && (
                                            <button
                                                class="event-tab group relative shrink-0 px-5 py-2 rounded-full bg-gray-900 hover:bg-gray-800 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                data-tab="all"
                                                data-active="true"
                                            >
                                                <div class="flex items-center space-x-1.5">
                                                    <span class="text-sm font-medium text-white">All</span>
                                                    <span class="inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-medium bg-gray-800 text-gray-300 rounded-full">
                                                        {todayEvents.length +
                                                            tomorrowEvents.length +
                                                            thisWeekEvents.length +
                                                            nextWeekEvents.length +
                                                            thisMonthEvents.length +
                                                            nextMonthEvents.length +
                                                            laterEvents.length}
                                                    </span>
                                                </div>
                                            </button>
                                        )}

                                        {/* Separator */}
                                        {(todayEvents.length > 0 ||
                                            tomorrowEvents.length > 0 ||
                                            thisWeekEvents.length > 0 ||
                                            nextWeekEvents.length > 0 ||
                                            thisMonthEvents.length > 0 ||
                                            nextMonthEvents.length > 0 ||
                                            laterEvents.length > 0) && <div class="h-6 w-px bg-gray-200 mx-2" />}

                                        {/* Time-based filters group */}
                                        <div class="flex items-center gap-2">
                                            {todayEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="today"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            Today
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {todayEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}

                                            {tomorrowEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="tomorrow"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            Tomorrow
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {tomorrowEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}

                                            {thisWeekEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="thisWeek"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            This Week
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {thisWeekEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}

                                            {nextWeekEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="nextWeek"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            Next Week
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {nextWeekEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}

                                            {thisMonthEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="thisMonth"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            This Month
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {thisMonthEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}

                                            {nextMonthEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="nextMonth"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            Next Month
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {nextMonthEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}

                                            {laterEvents.length > 0 && (
                                                <button
                                                    class="event-tab group relative shrink-0 px-4 py-1.5 rounded-full bg-gray-100/80 hover:bg-gray-100 data-[active=true]:bg-gray-900 focus:outline-none transition-colors"
                                                    data-tab="later"
                                                    data-active="false"
                                                >
                                                    <div class="flex items-center space-x-1.5">
                                                        <span class="text-sm font-medium text-gray-600 group-data-[active=true]:text-white">
                                                            Later
                                                        </span>
                                                        <span class="inline-flex items-center justify-center min-w-[1.5rem] px-1 py-0.5 text-xs font-medium bg-white/50 text-gray-500 group-data-[active=true]:bg-gray-800 group-data-[active=true]:text-gray-300 rounded-full ring-1 ring-inset ring-gray-200/20 group-hover:bg-white group-data-[active=true]:ring-gray-700">
                                                            {laterEvents.length}
                                                        </span>
                                                    </div>
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Event Sections */}
                        <div class="upcoming-sections">
                            {/* All Events Section */}
                            {(todayEvents.length > 0 ||
                                tomorrowEvents.length > 0 ||
                                thisWeekEvents.length > 0 ||
                                nextWeekEvents.length > 0 ||
                                thisMonthEvents.length > 0 ||
                                nextMonthEvents.length > 0 ||
                                laterEvents.length > 0) && (
                                <div class="upcoming-section" data-section="all" data-active="true">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {[
                                                ...todayEvents,
                                                ...tomorrowEvents,
                                                ...thisWeekEvents,
                                                ...nextWeekEvents,
                                                ...thisMonthEvents,
                                                ...nextMonthEvents,
                                                ...laterEvents,
                                            ].map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {[
                                            ...todayEvents,
                                            ...tomorrowEvents,
                                            ...thisWeekEvents,
                                            ...nextWeekEvents,
                                            ...thisMonthEvents,
                                            ...nextMonthEvents,
                                            ...laterEvents,
                                        ].map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {todayEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="today" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {todayEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {todayEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {tomorrowEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="tomorrow" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {tomorrowEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {tomorrowEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {thisWeekEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="thisWeek" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {thisWeekEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {thisWeekEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {thisMonthEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="thisMonth" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {thisMonthEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {thisMonthEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {nextWeekEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="nextWeek" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {nextWeekEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {nextWeekEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {nextMonthEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="nextMonth" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {nextMonthEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {nextMonthEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {laterEvents.length > 0 && (
                                <div class="upcoming-section hidden" data-section="later" data-active="false">
                                    {/* Mobile Scroll View */}
                                    <div class="sm:hidden scroll-container">
                                        <div class="scroll-area">
                                            {laterEvents.map((event: EventFromDB) => (
                                                <div class="scroll-item">
                                                    <div data-event={JSON.stringify(event)}>
                                                        <EventCard event={event} variant="upcoming" />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    {/* Desktop Grid View */}
                                    <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {laterEvents.map((event: EventFromDB) => (
                                            <div data-event={JSON.stringify(event)}>
                                                <EventCard event={event} variant="upcoming" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                )
            }

            {/* Recent Events Section */}
            {
                events?.recent && events?.recent?.length > 0 && (
                    <div class="mb-12">
                        <h2 class="text-xl font-semibold text-gray-900 mb-6">Recent Events</h2>
                        {/* Mobile Scroll View */}
                        <div class="sm:hidden scroll-container">
                            <div class="scroll-area">
                                {recentEvents.map((event: EventFromDB) => (
                                    <div class="scroll-item">
                                        <EventCard event={event} variant="recent" />
                                    </div>
                                ))}
                            </div>
                        </div>
                        {/* Desktop Grid View */}
                        <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                            {recentEvents.map((event: EventFromDB) => (
                                <EventCard event={event} variant="recent" />
                            ))}
                        </div>
                    </div>
                )
            }

            {/* Past Events Section */}
            {
                events?.past && events?.past?.length > 0 && (
                    <div>
                        <h2 class="text-xl font-semibold text-gray-900 mb-6">Past Events</h2>
                        {/* Mobile Scroll View */}
                        <div class="sm:hidden scroll-container">
                            <div class="scroll-area">
                                {pastEvents.slice(0, 9).map((event: EventFromDB) => (
                                    <div class="scroll-item">
                                        <EventCard event={event} variant="past" />
                                    </div>
                                ))}
                            </div>
                        </div>
                        {/* Desktop Grid View */}
                        <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                            {pastEvents.slice(0, 9).map((event: EventFromDB) => (
                                <EventCard event={event} variant="past" />
                            ))}
                        </div>
                    </div>
                )
            }

            {/* Empty state */}
            {
                !events?.happening.length &&
                    !events?.today.length &&
                    !events?.tomorrow.length &&
                    !events?.thisWeek.length &&
                    !events?.thisMonth.length &&
                    !events?.nextMonth.length &&
                    !events?.later.length &&
                    !events?.recent.length &&
                    !events?.past.length && (
                        <div class="text-center py-12">
                            <svg
                                class="mx-auto h-12 w-12 text-gray-400"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
                                />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No events found</h3>
                            <p class="mt-1 text-sm text-gray-500">Check back later for upcoming events.</p>
                        </div>
                    )
            }
        </div>
    </main>

    <Navigation />
</Layout>

<style>
    /* Mobile scroll styles */
    @media (max-width: 639px) {
        .scroll-container {
            width: 100%;
            overflow: hidden;
            padding: 0.5rem 0 1.5rem;
            margin: -0.5rem 0 -1.5rem;
        }

        .scroll-area {
            display: flex;
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            padding: 0.5rem 1rem;
            margin: 0 -1rem;
            gap: 1rem;
            overscroll-behavior-x: contain;
        }

        .scroll-area::-webkit-scrollbar {
            display: none;
        }

        .scroll-item {
            flex: 0 0 calc(90% - 1rem);
            scroll-snap-align: center;
            scroll-snap-stop: always;
            user-select: none;
            -webkit-user-select: none;
        }

        /* Add this new style for mobile cards */
        .scroll-item > div {
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        .scroll-item > div > a {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        /* Ensure the time filters group scrolls properly on mobile */
        .flex.items-center.gap-2 {
            flex-wrap: nowrap;
            min-width: min-content;
        }

        /* Prevent double-tap zooming on all interactive elements */
        button,
        a,
        .event-tab,
        [role='button'],
        input[type='button'],
        input[type='submit'] {
            touch-action: manipulation;
        }
    }

    /* Desktop scroll improvements */
    @media (min-width: 640px) {
        /* Better approach: target specific containers instead of the entire main */
        .container {
            contain: content;
        }

        /* Optimize grid layouts */
        .grid {
            contain: layout style;
            content-visibility: auto;
            contain-intrinsic-size: 300px;
        }

        /* Optimize event cards */
        .event-card {
            /* Only add will-change when needed (like during hover) */
            transition: transform 0.2s ease;
            backface-visibility: hidden;
            transform: translateZ(0);
        }

        /* More efficient rendering for sections */
        [data-section] {
            contain: paint style layout;
        }

        /* Virtualized list container */
        .virtualized-container {
            position: relative;
            width: 100%;
            overflow-y: auto;
            contain: strict;
        }

        /* Virtual scroller styles */
        .virtual-content {
            position: relative;
            width: 100%;
        }

        .virtual-item {
            position: absolute;
            width: 100%;
            transform: translateZ(0);
            will-change: transform;
            contain: layout style;
        }

        /* Item container for virtualization */
        .virtual-pool {
            display: none;
        }

        /* Hide all navigation arrows on desktop */
        .scroll-navigation,
        [class*='navigation-arrows'] {
            display: none !important;
        }
    }

    /* Hide scrollbar but keep functionality */
    .hide-scrollbar {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .hide-scrollbar::-webkit-scrollbar {
        display: none;
    }

    /* Smooth transitions */
    .event-tab [class*='scale-'] {
        transition-property: transform;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
    }

    /* Ensure the All tab stays visible */
    .event-tab[data-tab='all'] {
        position: sticky;
        left: 0;
        z-index: 10;
    }

    /* Add shadow to indicate more content */
    @media (max-width: 639px) {
        .flex.overflow-x-auto::after {
            content: '';
            position: absolute;
            right: 0;
            top: 0;
            bottom: 0;
            width: 24px;
            background: linear-gradient(to right, transparent, white);
            pointer-events: none;
        }
    }

    /* Hide navigation arrows in desktop view that appear in the upper right */
    @media (min-width: 640px) {
        .container > button[aria-label='Previous'],
        .container > button[aria-label='Next'],
        main .container > div > button,
        .container > div > div > button[aria-label='Previous'],
        .container > div > div > button[aria-label='Next'],
        .desktop-navigation-arrows,
        button:has(svg path[d*='M15 19l-7-7 7-7']),
        button:has(svg path[d*='M9 5l7 7-7 7']),
        main button.rounded-full svg,
        main button.rounded-full {
            display: none !important;
        }
    }
</style>

<script>
    // Function to initialize tab navigation
    function initializeTabNavigation() {
        // Get all event tabs
        const eventTabs = document.querySelectorAll('.event-tab');
        // Get all event sections
        const eventSections = document.querySelectorAll('.upcoming-section');

        // Add click event to each tab
        eventTabs.forEach((tab) => {
            tab.addEventListener('click', () => {
                const section = tab.getAttribute('data-tab');

                // Update active state of tabs
                eventTabs.forEach((t) => {
                    t.setAttribute('data-active', t === tab ? 'true' : 'false');
                });

                // Update active state of sections
                eventSections.forEach((s) => {
                    const sectionName = s.getAttribute('data-section');
                    const isActive = sectionName === section;
                    s.setAttribute('data-active', isActive ? 'true' : 'false');
                    s.classList.toggle('hidden', !isActive);
                });
            });
        });
    }

    // Function to initialize horizontal scrolling
    function initializeScrolling() {
        // Get scrollable containers
        const scrollContainers = document.querySelectorAll('.scroll-area');

        scrollContainers.forEach((container) => {
            // Get items
            const items = container.querySelectorAll('.scroll-item');
            if (!items.length) return;

            // First check if there are multiple items and we're on mobile
            if (items.length > 1 && window.innerWidth < 640) {
                // Then check if content is actually scrollable (content width > container width)
                const isScrollable = container.scrollWidth > container.clientWidth;

                // Only add navigation if content is scrollable
                if (isScrollable) {
                    const parent = container.parentElement;
                    if (!parent) return;

                    // Create navigation buttons container
                    const navContainer = document.createElement('div');
                    navContainer.className =
                        'flex items-center justify-end gap-2 mb-4 scroll-navigation mobile-only-navigation';

                    // Create previous button
                    const prevButton = document.createElement('button');
                    prevButton.className =
                        'rounded-full p-2 bg-gray-100 hover:bg-gray-200 transition-colors text-gray-600 disabled:opacity-40 disabled:cursor-not-allowed flex items-center justify-center';
                    prevButton.style.touchAction = 'manipulation';
                    prevButton.innerHTML = `
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                    `;
                    prevButton.disabled = true;

                    // Create next button
                    const nextButton = document.createElement('button');
                    nextButton.className =
                        'rounded-full p-2 bg-gray-100 hover:bg-gray-200 transition-colors text-gray-600 disabled:opacity-40 disabled:cursor-not-allowed flex items-center justify-center';
                    nextButton.style.touchAction = 'manipulation';
                    nextButton.innerHTML = `
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                    `;

                    // Append buttons to navigation container
                    navContainer.appendChild(prevButton);
                    navContainer.appendChild(nextButton);

                    // Add navigation container before scroll container
                    const section = parent.parentElement;
                    if (section) {
                        const header = section.querySelector('h2');
                        if (header) {
                            const headerContainer = document.createElement('div');
                            headerContainer.className = 'flex justify-between items-center mb-6';

                            // Move the original header to the container
                            section.insertBefore(headerContainer, header);
                            headerContainer.appendChild(header);
                            headerContainer.appendChild(navContainer);
                        } else {
                            section.insertBefore(navContainer, parent);
                        }
                    }

                    // Add click event to previous button
                    prevButton.addEventListener('click', () => {
                        // Get the width of an item plus margin
                        const itemWidth = (items[0] as HTMLElement).offsetWidth + 16; // 16px is the gap
                        // Scroll to the previous item
                        container.scrollBy({ left: -itemWidth, behavior: 'smooth' });
                    });

                    // Add click event to next button
                    nextButton.addEventListener('click', () => {
                        // Get the width of an item plus margin
                        const itemWidth = (items[0] as HTMLElement).offsetWidth + 16; // 16px is the gap
                        // Scroll to the next item
                        container.scrollBy({ left: itemWidth, behavior: 'smooth' });
                    });

                    // Update button states on scroll
                    container.addEventListener('scroll', () => {
                        prevButton.disabled = container.scrollLeft <= 10;
                        nextButton.disabled =
                            container.scrollLeft >= container.scrollWidth - (container as HTMLElement).offsetWidth - 10;
                    });

                    // Initial button state update
                    prevButton.disabled = container.scrollLeft <= 10;
                    nextButton.disabled =
                        container.scrollLeft >= container.scrollWidth - (container as HTMLElement).offsetWidth - 10;
                }
            }
        });
    }

    // Function to update event sections visibility
    function updateEventSections() {
        ['happening', 'upcoming'].forEach((section) => {
            const sectionEl = document.querySelector(`[data-section="${section}"]`) as HTMLDivElement;
            const grid = sectionEl?.querySelector('.grid, .scroll-area');
            if (sectionEl && grid) {
                const hasEvents = grid.children.length > 0;
                sectionEl.style.display = hasEvents ? 'block' : 'none';
            }
        });
    }

    // Function to equalize card heights in scroll views
    function equalizeCardHeights() {
        if (window.innerWidth >= 640) return; // Only for mobile

        const scrollAreas = document.querySelectorAll('.scroll-area');
        scrollAreas.forEach((scrollArea) => {
            const cards = scrollArea.querySelectorAll('.event-card');
            if (!cards.length) return;

            // Reset heights first
            cards.forEach((card) => {
                (card as HTMLElement).style.height = 'auto';
            });

            // Find the tallest card
            let maxHeight = 0;
            cards.forEach((card) => {
                const height = (card as HTMLElement).offsetHeight;
                maxHeight = Math.max(maxHeight, height);
            });

            // Set all cards to the tallest height
            if (maxHeight > 0) {
                cards.forEach((card) => {
                    (card as HTMLElement).style.height = `${maxHeight}px`;
                });
            }
        });
    }

    /**
     * Virtualized list implementation for desktop
     */
    class VirtualScroller {
        container: HTMLElement;
        itemHeight: number = 320; // Default height (will be measured)
        itemsPerRow: number = 3; // Default for desktop (lg:grid-cols-3)
        visibleItems: number = 15; // Number of items to render at once
        buffer: number = 6; // Buffer items to render above/below viewport
        items: any[] = [];
        virtualItems: HTMLElement[] = [];
        scrollContainer: HTMLElement;
        contentContainer: HTMLElement;
        itemPool: HTMLElement[] = [];
        onScrollTimeout: number | null = null;

        constructor(container: HTMLElement, items: any[] = []) {
            this.container = container;
            this.scrollContainer = container;
            this.contentContainer = document.createElement('div');

            if (!container) return;

            // Determine how many items per row based on screen size
            if (window.innerWidth < 1024 && window.innerWidth >= 640) {
                this.itemsPerRow = 2; // sm:grid-cols-2
            }

            // Create the virtual scroller structure
            this.setupDOM();

            // Set data items
            if (items && items.length) {
                this.setItems(items);
            }

            // Bind events
            this.bindEvents();
        }

        setupDOM(): void {
            // Clear container
            this.container.innerHTML = '';
            this.container.classList.add('virtualized-container');

            // Create content container
            this.contentContainer = document.createElement('div');
            this.contentContainer.className = 'virtual-content';
            this.container.appendChild(this.contentContainer);

            // Create the item pool container (hidden, used for measuring)
            const poolContainer = document.createElement('div');
            poolContainer.className = 'virtual-pool';
            this.container.appendChild(poolContainer);
        }

        setItems(items: any[]): void {
            this.items = items;

            // Create a single item for measurement
            if (items.length > 0 && !this.itemPool.length) {
                const measureItem = this.renderItem(items[0], 0);
                const poolContainer = this.container.querySelector('.virtual-pool');
                if (poolContainer && measureItem) {
                    poolContainer.appendChild(measureItem);
                    // Measure the height after it's in the DOM
                    this.itemHeight = measureItem.offsetHeight || this.itemHeight;
                }
            }

            // Calculate total height
            const rows = Math.ceil(items.length / this.itemsPerRow);
            const totalHeight = rows * this.itemHeight;
            this.contentContainer.style.height = `${totalHeight}px`;

            // Initial render
            this.renderVisibleItems();
        }

        renderItem(item: any, index: number): HTMLElement | null {
            // Clone the template event card and set its data
            const template = document.getElementById('event-template') as HTMLTemplateElement;
            if (!template) {
                console.error('Event template not found');
                return null;
            }

            const clonedContent = template.content.cloneNode(true) as DocumentFragment;
            const itemEl = clonedContent.firstElementChild as HTMLElement;

            // Fill in data - this part depends on your event card structure
            if (itemEl) {
                itemEl.setAttribute('data-index', index.toString());
                // Set data-event attribute for your existing code to work with
                itemEl.setAttribute('data-event', JSON.stringify(item));
            }

            return itemEl;
        }

        getPoolItem(): HTMLElement {
            // Reuse an existing item from the pool if available
            if (this.itemPool.length > 0) {
                return this.itemPool.pop() as HTMLElement;
            }

            // Create a new item container
            const item = document.createElement('div');
            item.className = 'virtual-item';
            return item;
        }

        renderVisibleItems(): void {
            // Calculate visible range
            const scrollTop = this.scrollContainer.scrollTop;
            const viewportHeight = this.scrollContainer.offsetHeight;

            // Calculate row range
            const startRow = Math.floor(scrollTop / this.itemHeight) - this.buffer;
            const endRow = Math.ceil((scrollTop + viewportHeight) / this.itemHeight) + this.buffer;

            const startIdx = Math.max(0, startRow * this.itemsPerRow);
            const endIdx = Math.min(this.items.length, endRow * this.itemsPerRow);

            // Get currently rendered items
            const currentItems = Array.from(this.contentContainer.children) as HTMLElement[];
            const currentIndexes = new Set(currentItems.map((el) => parseInt(el.getAttribute('data-index') || '-1')));

            // Determine which items to add and remove
            const newIndexes = new Set<number>();
            for (let i = startIdx; i < endIdx; i++) {
                newIndexes.add(i);
            }

            // Remove items that are no longer visible
            currentItems.forEach((item) => {
                const idx = parseInt(item.getAttribute('data-index') || '-1');
                if (!newIndexes.has(idx)) {
                    // Move to pool for reuse
                    this.itemPool.push(item);
                    this.contentContainer.removeChild(item);
                }
            });

            // Add new items that are now visible
            for (let i = startIdx; i < endIdx; i++) {
                if (!currentIndexes.has(i) && i < this.items.length) {
                    const item = this.getPoolItem();
                    const row = Math.floor(i / this.itemsPerRow);
                    const col = i % this.itemsPerRow;

                    // Position the item
                    item.style.top = `${row * this.itemHeight}px`;

                    // For grid layout, calculate width and left position
                    const itemWidth = 100 / this.itemsPerRow;
                    item.style.width = `${itemWidth}%`;
                    item.style.left = `${col * itemWidth}%`;

                    // Set item content and data
                    item.innerHTML = '';
                    const renderedItem = this.renderItem(this.items[i], i);
                    if (renderedItem) {
                        item.appendChild(renderedItem);
                    }
                    item.setAttribute('data-index', i.toString());

                    // Add to DOM
                    this.contentContainer.appendChild(item);
                }
            }
        }

        bindEvents(): void {
            // Throttled scroll handler
            this.scrollContainer.addEventListener('scroll', () => {
                if (this.onScrollTimeout) return;

                this.onScrollTimeout = window.setTimeout(() => {
                    this.renderVisibleItems();
                    this.onScrollTimeout = null;
                }, 16); // ~60fps
            });

            // Update on resize
            window.addEventListener('resize', () => {
                // Recalculate items per row
                if (window.innerWidth < 1024 && window.innerWidth >= 640) {
                    this.itemsPerRow = 2;
                } else if (window.innerWidth >= 1024) {
                    this.itemsPerRow = 3;
                }

                // Update layout
                const rows = Math.ceil(this.items.length / this.itemsPerRow);
                const totalHeight = rows * this.itemHeight;
                this.contentContainer.style.height = `${totalHeight}px`;

                // Re-render visible items
                this.renderVisibleItems();
            });
        }
    }

    // Function to initialize virtualization for desktop
    function initializeVirtualization() {
        if (window.innerWidth < 640) return; // Only for desktop

        // Create a template element to use for cloning
        createEventTemplate();

        // Find all desktop grid views that could benefit from virtualization
        const gridContainers = document.querySelectorAll('.hidden.sm\\:grid');

        gridContainers.forEach((container) => {
            // Check if it contains enough items to benefit from virtualization
            // Don't virtualize small lists
            const items = Array.from(container.children);
            if (items.length < 12) return;

            // Get event data from items
            const eventData = items
                .map((item) => {
                    const dataAttr = item.getAttribute('data-event');
                    if (dataAttr) {
                        try {
                            return JSON.parse(dataAttr);
                        } catch (e) {
                            console.error('Error parsing event data', e);
                            return null;
                        }
                    }
                    return null;
                })
                .filter(Boolean) as any[];

            // Create virtual scroller
            const parentContainer = container.parentElement;
            if (parentContainer) {
                // Create the virtual container
                const virtualContainer = document.createElement('div');
                virtualContainer.className = 'hidden sm:block';

                // Replace the grid with our virtual container
                parentContainer.insertBefore(virtualContainer, container);
                parentContainer.removeChild(container);

                // Initialize virtual scroller
                new VirtualScroller(virtualContainer, eventData);
            }
        });
    }

    // Create a template element for the event card
    function createEventTemplate() {
        // Check if template already exists
        if (document.getElementById('event-template')) return;

        // Find an existing event card to use as template
        const eventCard = document.querySelector('.event-card');
        if (!eventCard) return;

        // Create template element
        const template = document.createElement('template');
        template.id = 'event-template';

        // Clone the event card
        const clone = eventCard.cloneNode(true);
        template.content.appendChild(clone);

        // Add to document
        document.body.appendChild(template);
    }

    // Function to initialize all features
    function initialize() {
        initializeTabNavigation();
        initializeScrolling();
        updateEventSections();
        equalizeCardHeights();
        initializeVirtualization();

        // Re-run equalize when images load
        const images = document.querySelectorAll('img');
        images.forEach((img) => {
            img.addEventListener('load', equalizeCardHeights);
        });
    }

    // Run on initial page load
    initialize();

    // Remove arrows from the desktop view (those that appear in the screenshot)
    if (window.innerWidth >= 640) {
        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Remove all navigation arrows from desktop view that match the arrows in screenshot
            const buttons = document.querySelectorAll('button');
            buttons.forEach((button) => {
                // Check if button contains an SVG with path that looks like an arrow
                const svg = button.querySelector('svg');
                if (svg) {
                    const path = svg.querySelector('path');
                    if (
                        path &&
                        (path.getAttribute('d')?.includes('M15 19l-7-7 7-7') ||
                            path.getAttribute('d')?.includes('M9 5l7 7-7 7'))
                    ) {
                        // This is likely a navigation arrow, hide it on desktop
                        button.style.display = 'none';
                    }
                }
            });
        });
    }

    // Run after each navigation
    document.addEventListener('astro:page-load', initialize);

    // Re-run on window resize
    let resizeTimer: any;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
            equalizeCardHeights();
        }, 100);
    });
</script>
