---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Header from '../components/Header.astro';
import SEO from '../components/SEO.astro';
import AgendaView from '../components/AgendaView.astro';
import { supabase } from '../lib/supabase';
import type { EventFromDB } from '../types/database';
import OnlineUsers from '../components/OnlineUsers.astro';

const TIMEZONE = 'Asia/Manila';

// Helper function to get date in Manila timezone
function getDateInTimezone(date: Date): Date {
    return new Date(date.toLocaleString('en-US', { timeZone: TIMEZONE }));
}

// Get current date in Manila timezone
const now = getDateInTimezone(new Date());
const today = new Date(now.setHours(0, 0, 0, 0));

// Get date 30 days ago
const thirtyDaysAgo = getDateInTimezone(new Date(today));
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

// Calculate next 90 days in Manila timezone
const ninetyDaysLater = getDateInTimezone(new Date(today));
ninetyDaysLater.setDate(ninetyDaysLater.getDate() + 90);

// Fetch upcoming events from Supabase
const { data: upcomingEventsData, error: upcomingError } = (await supabase
    .from('events')
    .select('*')
    .filter('is_hidden', 'not.is', 'true')
    .gte('start_time', today.toISOString())
    .lte('start_time', ninetyDaysLater.toISOString())
    .order('start_time', { ascending: true })) as {
    data: EventFromDB[] | null;
    error: any;
};

// Fetch recent events from Supabase
const { data: recentEventsData, error: recentError } = (await supabase
    .from('events')
    .select('*')
    .filter('is_hidden', 'not.is', 'true')
    .lt('start_time', today.toISOString())
    .gte('start_time', thirtyDaysAgo.toISOString())
    .order('start_time', { ascending: false })) as {
    data: EventFromDB[] | null;
    error: any;
};

// Extract featured events but ALSO keep them in the regular events list
const featuredEvents = upcomingEventsData?.filter((event) => event.is_featured) || [];

// Remove duplicates based on event name for upcoming events
const upcomingEvents =
    upcomingEventsData?.reduce((unique: EventFromDB[], event) => {
        const exists = unique.find((e) => e.name.toLowerCase() === event.name.toLowerCase());
        if (!exists) {
            unique.push(event);
        }
        return unique;
    }, []) || [];

// Remove duplicates based on event name for recent events
const recentEvents = recentEventsData?.reduce((unique: EventFromDB[], event) => {
    const exists = unique.find((e) => e.name.toLowerCase() === event.name.toLowerCase());
    if (!exists) {
        unique.push(event);
    }
    return unique;
}, []);

// Create meta description
const upcomingCount = upcomingEvents?.length || 0;
const featuredCount = featuredEvents?.length || 0;
const recentCount = recentEvents?.length || 0;
const metaDescription = `View the agenda of ${upcomingCount} upcoming tech events in Cebu, including ${featuredCount} featured events. Plan your schedule with our chronological event listing.`;

// Create JSON-LD for the agenda page
const agendaJsonLd = {
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    name: 'Tech Events Agenda - Cebby',
    description: metaDescription,
    publisher: {
        '@type': 'Organization',
        name: 'Cebby',
        logo: {
            '@type': 'ImageObject',
            url: new URL('/icons/icon-512x512.png', Astro.url),
        },
    },
};
---

<Layout title="Tech Events Agenda - Cebby">
    <Fragment slot="head">
        <SEO
            title="Tech Events Agenda - Cebby"
            description={metaDescription}
            image="/screenshots/image2.png"
            type="website"
        />

        {/* Add JSON-LD Schema markup */}
        <script is:inline type="application/ld+json" set:html={JSON.stringify(agendaJsonLd)} />
    </Fragment>

    <Header />

    <main class="min-h-screen pb-16 sm:pb-0 pt-safe">
        <div class="container max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8 px-safe">
            {
                (upcomingError || recentError) && (
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6" role="alert">
                        <p class="font-medium">Failed to load events. Please try again later.</p>
                    </div>
                )
            }

            {/* Upcoming Events Section - Full Width */}
            <div class="mb-12">
                {
                    upcomingEvents && upcomingEvents.length > 0 ? (
                        <AgendaView
                            events={upcomingEvents}
                            title="Upcoming Events"
                            showMonthYear={true}
                            isRecentEvents={false}
                        />
                    ) : (
                        <div class="bg-white rounded-xl shadow-sm p-6 text-center">
                            <svg
                                class="mx-auto h-12 w-12 text-gray-400"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
                                />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No upcoming events</h3>
                            <p class="mt-1 text-sm text-gray-500">Check back later for upcoming events.</p>
                        </div>
                    )
                }
            </div>

            {/* Recent Events Section - Collapsible */}
            {
                recentEvents && recentEvents.length > 0 && (
                    <div class="recent-events-section mt-8">
                        <details class="group">
                            <summary class="flex justify-between items-center cursor-pointer py-2 text-lg font-semibold text-gray-700 border-b border-gray-200 mb-4">
                                <span>Recent Events ({recentEvents.length})</span>
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    class="group-open:rotate-180 transition-transform duration-200"
                                >
                                    <polyline points="6 9 12 15 18 9" />
                                </svg>
                            </summary>
                            <div class="pt-2">
                                <AgendaView events={recentEvents} title="" showMonthYear={true} isRecentEvents={true} />
                            </div>
                        </details>
                    </div>
                )
            }

            {/* No Events Message */}
            {
                (!featuredEvents || featuredEvents.length === 0) &&
                    (!upcomingEvents || upcomingEvents.length === 0) &&
                    (!recentEvents || recentEvents.length === 0) && (
                        <div class="text-center py-12">
                            <svg
                                class="mx-auto h-12 w-12 text-gray-400"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
                                />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No events found</h3>
                            <p class="mt-1 text-sm text-gray-500">Check back later for upcoming events.</p>
                        </div>
                    )
            }
        </div>
    </main>

    <Navigation />
</Layout>

<style>
    /* Styles for details/summary elements */
    details > summary {
        list-style: none;
    }
    details > summary::-webkit-details-marker {
        display: none;
    }
    details[open] summary {
        border-color: transparent;
    }

    /* Line clamp utilities */
    .line-clamp-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    .line-clamp-4 {
        display: -webkit-box;
        -webkit-line-clamp: 4;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Hide scrollbar but keep functionality */
    .hide-scrollbar {
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE and Edge */
    }

    .hide-scrollbar::-webkit-scrollbar {
        display: none; /* Chrome, Safari and Opera */
    }

    /* Snap scrolling for better UX */
    .snap-x {
        scroll-snap-type: x mandatory;
    }

    .snap-start {
        scroll-snap-align: start;
    }
</style>

<script>
    // Client-side JavaScript
    document.addEventListener('astro:page-load', () => {
        // Add animation for details/summary elements
        const details = document.querySelectorAll('details');
        details.forEach((detail) => {
            const summary = detail.querySelector('summary');
            summary?.addEventListener('click', () => {
                // Add smooth animation when opening/closing
                const content = detail.querySelector('div');
                if (content) {
                    if (detail.open) {
                        content.style.maxHeight = '0px';
                        content.style.opacity = '0';
                        setTimeout(() => {
                            detail.removeAttribute('open');
                        }, 200);
                    } else {
                        detail.setAttribute('open', '');
                        setTimeout(() => {
                            content.style.maxHeight = content.scrollHeight + 'px';
                            content.style.opacity = '1';
                        }, 0);
                    }
                }
            });
        });

        // Horizontal scroll controls for featured events
        const scrollContainer = document.getElementById('featured-scroll-container');
        const scrollLeftBtn = document.getElementById('scroll-left');
        const scrollRightBtn = document.getElementById('scroll-right');

        if (scrollContainer && scrollLeftBtn && scrollRightBtn) {
            // Default scroll amount - about 1 card width
            const scrollAmount = 320;

            scrollLeftBtn.addEventListener('click', () => {
                scrollContainer.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
            });

            scrollRightBtn.addEventListener('click', () => {
                scrollContainer.scrollBy({ left: scrollAmount, behavior: 'smooth' });
            });

            // Track scrolling to show/hide buttons
            scrollContainer.addEventListener('scroll', () => {
                // Disable left button at start
                if (scrollContainer.scrollLeft <= 10) {
                    scrollLeftBtn.classList.add('opacity-50', 'cursor-not-allowed');
                } else {
                    scrollLeftBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                }

                // Disable right button at end
                if (scrollContainer.scrollLeft + scrollContainer.clientWidth >= scrollContainer.scrollWidth - 10) {
                    scrollRightBtn.classList.add('opacity-50', 'cursor-not-allowed');
                } else {
                    scrollRightBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                }
            });

            // Initial check
            if (scrollContainer.scrollWidth <= scrollContainer.clientWidth) {
                scrollRightBtn.classList.add('opacity-50', 'cursor-not-allowed');
            }

            scrollLeftBtn.classList.add('opacity-50', 'cursor-not-allowed');
        }
    });
</script>
