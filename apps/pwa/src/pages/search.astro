---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import EventCard from '../components/EventCard.astro';
import Header from '../components/Header.astro';
import SEO from '../components/SEO.astro';
import Search from '../components/Search.astro';
import { searchEvents } from '../lib/typesense';
import type { EventDocument } from '../lib/typesense';

// Get the search query from URL parameters
const url = new URL(Astro.request.url);
const query = url.searchParams.get('q') || '';
const page = parseInt(url.searchParams.get('page') || '1');
const perPage = 20;

// Perform search if query exists
let searchResults: EventDocument[] = [];
let totalFound = 0;
let searchTimeMs = 0;
let searchError: string | null = null;

if (query.trim()) {
    try {
        const results = await searchEvents(query, {
            per_page: perPage,
            page: page,
        });

        searchResults = results.results;
        totalFound = results.found;
        searchTimeMs = results.search_time_ms;
        searchError = results.error || null;
    } catch (error) {
        console.error('Search error:', error);
        searchError = 'Search service unavailable';
    }
}

// Calculate pagination
const totalPages = Math.ceil(totalFound / perPage);
const hasNextPage = page < totalPages;
const hasPrevPage = page > 1;

// Group search results by upcoming/past for better organization
const now = new Date();
const upcomingResults = searchResults.filter((event) => new Date(event.start_time * 1000) > now);
const pastResults = searchResults.filter((event) => new Date(event.start_time * 1000) <= now);

// Meta description for search results
const metaDescription = query
    ? `Search results for "${query}" - Found ${totalFound} events in Cebu's tech community`
    : "Search through Cebu's tech events, conferences, workshops, and meetups";
---

<Layout title={query ? `Search: ${query} - cebby` : 'Search Events - cebby'}>
    <Fragment slot="head">
        <SEO
            title={query ? `Search: ${query} - cebby` : 'Search Events - cebby'}
            description={metaDescription}
            image="/screenshots/image2.png"
            type="website"
        />
    </Fragment>

    <Header />

    <main class="min-h-screen pb-16 sm:pb-0 pt-safe">
        <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 px-safe">
            {/* Search Header */}
            <div class="mb-8">
                <div class="hidden sm:flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
                    {
                        query && !searchError && (
                            <div>
                                <h1 class="text-xl font-semibold text-gray-900">
                                    Search results for <span class="font-bold text-purple-600 italic">"{query}"</span>
                                </h1>
                            </div>
                        )
                    }

                    {/* Search Stats */}
                    {
                        query && !searchError && (
                            <div class="flex items-center gap-4 text-sm text-gray-500">
                                <span>
                                    {totalFound} event{totalFound !== 1 ? 's' : ''} found
                                </span>
                                <span class="bg-gray-100 px-2 py-1 rounded-full">{searchTimeMs}ms</span>
                            </div>
                        )
                    }
                </div>
            </div>

            {/* Search Error */}
            {
                searchError && (
                    <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6" role="alert">
                        <p class="font-medium">Search Error</p>
                        <p class="text-sm">{searchError}</p>
                    </div>
                )
            }

            {/* No Query State */}
            {
                !query.trim() && (
                    <div class="text-center py-12">
                        <svg
                            class="mx-auto h-12 w-12 text-gray-400 mb-4"
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="lucide lucide-party-popper-icon lucide-party-popper"
                        >
                            <>
                                <path d="M5.8 11.3 2 22l10.7-3.79" />
                                <path d="M4 3h.01" />
                                <path d="M22 8h.01" />
                                <path d="M15 2h.01" />
                                <path d="M22 20h.01" />
                                <path d="m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10" />
                                <path d="m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17" />
                                <path d="m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7" />
                                <path d="M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z" />
                            </>
                        </svg>

                        <h3 class="text-xl font-semibold text-gray-900 mb-2">Search Cebu's Tech Events</h3>
                        <p class="text-gray-600 mb-6 max-w-md mx-auto">
                            Find workshops, conferences, meetups, and other tech events happening in Cebu
                        </p>

                        <div class="flex flex-wrap justify-center gap-2 mt-12">
                            {[
                                { label: 'AI', query: 'AI' },
                                { label: 'Startup', query: 'startup' },
                                { label: 'Networking', query: 'networking' },
                                { label: 'Web Dev', query: 'web development' },
                                { label: 'Blockchain', query: 'blockchain' },
                                { label: 'Free', query: 'free' },
                                { label: 'Workshop', query: 'workshop' },
                                { label: 'Meetup', query: 'meetup' },
                                { label: 'Tech Talk', query: 'tech talk' },
                            ].map((tag) => (
                                <a
                                    href={`/search?q=${encodeURIComponent(tag.query)}`}
                                    class="px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-purple-600 hover:text-white transition-colors"
                                >
                                    {tag.label}
                                </a>
                            ))}
                        </div>
                    </div>
                )
            }

            {/* No Results State */}
            {
                query.trim() && !searchError && searchResults.length === 0 && (
                    <div class="text-center py-12">
                        <svg
                            class="mx-auto h-12 w-12 text-gray-400 mb-4"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <circle cx="11" cy="11" r="8" />
                            <path d="m21 21-4.3-4.3" />
                        </svg>
                        <h3 class="text-xl font-semibold text-gray-900 mb-2">No events found</h3>
                        <p class="text-gray-600 mb-6 max-w-md mx-auto italic">
                            No events match your search for <strong>"{query}"</strong>. Try different keywords or browse
                            all events.
                        </p>
                        <div class="flex flex-col sm:flex-row gap-3 justify-center">
                            <a
                                href="/events"
                                class="inline-flex items-center p-4 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition-colors"
                            >
                                Browse All Events
                            </a>
                            <a
                                href="https://dorelljames.notion.site/1363f8eda070806687bcfb7f10301128?pvs=105"
                                target="_blank"
                                class="inline-flex items-center p-4 border border-gray-300 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-50 transition-colors"
                            >
                                Suggest an Event
                                <svg class="ml-2 w-3 h-3" viewBox="0 0 20 20" fill="currentColor">
                                    <path
                                        fill-rule="evenodd"
                                        d="M5.22 14.78a.75.75 0 001.06 0l7.22-7.22v5.69a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75h-7.5a.75.75 0 000 1.5h5.69l-7.22 7.22a.75.75 0 000 1.06z"
                                        clip-rule="evenodd"
                                    />
                                </svg>
                            </a>
                        </div>
                    </div>
                )
            }

            {/* Search Results */}
            {
                searchResults.length > 0 && (
                    <>
                        {/* Upcoming Events */}
                        {upcomingResults.length > 0 && (
                            <div class="mb-12">
                                <h2 class="text-xl font-semibold text-gray-900 mb-6">Upcoming Events</h2>

                                {/* Mobile Scroll View */}
                                <div class="sm:hidden scroll-container">
                                    <div class="scroll-area">
                                        {upcomingResults.map((event) => (
                                            <div class="scroll-item">
                                                <div data-event={JSON.stringify(event)}>
                                                    <EventCard
                                                        event={{
                                                            id: parseInt(event.id),
                                                            name: event.name,
                                                            description: event.description,
                                                            start_time: new Date(event.start_time * 1000).toISOString(),
                                                            end_time: event.end_time
                                                                ? new Date(event.end_time * 1000).toISOString()
                                                                : null,
                                                            location: event.location,
                                                            is_free: event.is_free,
                                                            is_online: event.is_online,
                                                            slug: event.slug,
                                                            cover_photo: event.cover_photo,
                                                            accounts: { name: event.organization },
                                                        }}
                                                        variant="upcoming"
                                                    />
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                {/* Desktop Grid View */}
                                <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                    {upcomingResults.map((event) => (
                                        <div data-event={JSON.stringify(event)}>
                                            <EventCard
                                                event={{
                                                    id: parseInt(event.id),
                                                    name: event.name,
                                                    description: event.description,
                                                    start_time: new Date(event.start_time * 1000).toISOString(),
                                                    end_time: event.end_time
                                                        ? new Date(event.end_time * 1000).toISOString()
                                                        : null,
                                                    location: event.location,
                                                    is_free: event.is_free,
                                                    is_online: event.is_online,
                                                    slug: event.slug,
                                                    cover_photo: event.cover_photo,
                                                    accounts: { name: event.organization },
                                                }}
                                                variant="upcoming"
                                            />
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Past Events */}
                        {pastResults.length > 0 && (
                            <div class="mb-12">
                                <h2 class="font-semibold text-gray-900 mb-6 text-uppercase">Past Events</h2>

                                {/* Mobile Scroll View */}
                                <div class="sm:hidden scroll-container">
                                    <div class="scroll-area">
                                        {pastResults.map((event) => (
                                            <div class="scroll-item">
                                                <div data-event={JSON.stringify(event)}>
                                                    <EventCard
                                                        event={{
                                                            id: parseInt(event.id),
                                                            name: event.name,
                                                            description: event.description,
                                                            start_time: new Date(event.start_time * 1000).toISOString(),
                                                            end_time: event.end_time
                                                                ? new Date(event.end_time * 1000).toISOString()
                                                                : null,
                                                            location: event.location,
                                                            is_free: event.is_free,
                                                            is_online: event.is_online,
                                                            slug: event.slug,
                                                            cover_photo: event.cover_photo,
                                                            accounts: { name: event.organization },
                                                        }}
                                                        variant="past"
                                                    />
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                {/* Desktop Grid View */}
                                <div class="hidden sm:grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                                    {pastResults.map((event) => (
                                        <div data-event={JSON.stringify(event)}>
                                            <EventCard
                                                event={{
                                                    id: parseInt(event.id),
                                                    name: event.name,
                                                    description: event.description,
                                                    start_time: new Date(event.start_time * 1000).toISOString(),
                                                    end_time: event.end_time
                                                        ? new Date(event.end_time * 1000).toISOString()
                                                        : null,
                                                    location: event.location,
                                                    is_free: event.is_free,
                                                    is_online: event.is_online,
                                                    slug: event.slug,
                                                    cover_photo: event.cover_photo,
                                                    accounts: { name: event.organization },
                                                }}
                                                variant="past"
                                            />
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Pagination */}
                        {totalPages > 1 && (
                            <div class="flex items-center justify-center gap-2 mt-8">
                                {hasPrevPage && (
                                    <a
                                        href={`/search?q=${encodeURIComponent(query)}&page=${page - 1}`}
                                        class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                                    >
                                        Previous
                                    </a>
                                )}

                                <span class="px-3 py-2 text-sm text-gray-600">
                                    Page {page} of {totalPages}
                                </span>

                                {hasNextPage && (
                                    <a
                                        href={`/search?q=${encodeURIComponent(query)}&page=${page + 1}`}
                                        class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                                    >
                                        Next
                                    </a>
                                )}
                            </div>
                        )}
                    </>
                )
            }
        </div>
    </main>

    <Navigation />
</Layout>

<style>
    /* Mobile scroll styles - same as events page */
    @media (max-width: 639px) {
        .scroll-container {
            width: 100%;
            overflow: hidden;
            padding: 0.5rem 0 1.5rem;
            margin: -0.5rem 0 -1.5rem;
        }

        .scroll-area {
            display: flex;
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            padding: 0.5rem 1rem;
            margin: 0 -1rem;
            gap: 1rem;
            overscroll-behavior-x: contain;
        }

        .scroll-area::-webkit-scrollbar {
            display: none;
        }

        .scroll-item {
            flex: 0 0 calc(90% - 1rem);
            scroll-snap-align: center;
            scroll-snap-stop: always;
            user-select: none;
            -webkit-user-select: none;
        }

        .scroll-item > div {
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        .scroll-item > div > a {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
    }
</style>
